import{S as Do,i as Oo,s as To,k as i,q as l,a as c,l as p,m as r,r as a,h as t,c as m,n as So,b as n,B as o,A as jt}from"./index-39c5cc75.js";function Ho(bo){let E,qe,re,h,Ie,A,Le,Be,N,ze,Fe,ce,S,Re,me,H,Ae,fe,x,Co=`<code class="language-css"><span class="token selector">.grid-container</span> <span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ue,M,Ne,he,f,Ge,G,je,Je,j,Ke,Qe,J,Ue,Ve,K,Xe,Ye,de,W,Q,Ze,we,k,U,$e,ge,ve,v,et,V,tt,ot,X,lt,Ee,q,at,ye,b,st,Y,nt,_e,C,Z,it,pt,xe,P,$,rt,ct,ke,u,mt,g,ft,ut,ee,ht,dt,te,wt,vt,be,I,Et,Ce,D,yt,oe,_t,Pe,O,le,xt,kt,De,d,bt,ae,Ct,Pt,se,Dt,Ot,Oe,T,Tt,ne,St,Te,y,Ht,ie,Mt,Wt,Se,L,qt,He,B,It,Me,z,Lt;return{c(){E=i("h1"),qe=l(ko),re=c(),h=i("p"),Ie=l(`There are two main ways to customise the layout of HTML elements / components:
`),A=i("code"),Le=l("display: grid"),Be=l(" and "),N=i("code"),ze=l("display: flex"),Fe=l("."),ce=c(),S=i("p"),Re=l("This post describes how to achieve a responsive layout that will automatically populate components into a parent component such that the number of columns is dynamic. For example, when viewed on larger screens, there will be 5 columns, but when viewed on narrower screens, it will shrink to one column."),me=c(),H=i("p"),Ae=l("TL;DR:"),fe=c(),x=i("pre"),ue=c(),M=i("h2"),Ne=l("display: grid"),he=c(),f=i("p"),Ge=l("By setting the "),G=i("em"),je=l("parent"),Je=l(" component\u2019s CSS property to "),j=i("code"),Ke=l("display: grid"),Qe=l(", we are able to control how the "),J=i("em"),Ue=l("child"),Ve=l(" components are arranged. This property itself does not do anything, you will need to specify "),K=i("em"),Xe=l("how"),Ye=l(" the components should be arranged."),de=c(),W=i("h2"),Q=i("code"),Ze=l("grid-template-columns"),we=c(),k=i("p"),U=i("code"),$e=l("grid-template-columns"),ge=l(" is one of the CSS property that helps you specify how child components are arranged. The simplest way is to give values corresponding to the size of each column."),ve=c(),v=i("p"),et=l("For example: "),V=i("code"),tt=l("grid-template-columns: 1fr 1fr 1fr"),ot=l(` will arrange the child components into 3 columns taking equal widths, and if there are more than 3 child components it will flow to the next row.
`),X=i("em"),lt=l("Notice that the number of values you pass in will determine the number of columns in the grid"),Ee=c(),q=i("h2"),at=l("repeat()"),ye=c(),b=i("p"),st=l("Instead of statically passing in the number of values, there is another equivalent syntax using the repeat() function: "),Y=i("code"),nt=l("grid-template-columns: repeat(3, 1fr)"),_e=c(),C=i("p"),Z=i("code"),it=l("repeat()"),pt=l(" takes in 2 parameters, the number of times to repeat and the size to repeat."),xe=c(),P=i("h3"),$=i("code"),rt=l("repeat()"),ct=l(": special #1"),ke=c(),u=i("p"),mt=l("Instead of having the number of times as the first parameter, "),g=i("code"),ft=l("repeat()"),ut=l(" can also take in either of these two keywords: "),ee=i("code"),ht=l("autofit"),dt=l(" and "),te=i("code"),wt=l("autofill"),vt=l(", as its first parameter."),be=c(),I=i("p"),Et=l("Both keywords work similarly in that they will populate the maximum number of columns until no more child components can fit, then move on to the next row."),Ce=c(),D=i("p"),yt=l("Example: "),oe=i("code"),_t=l("grid-template-columns: repeat(autofill, 200px)"),Pe=c(),O=i("h3"),le=i("code"),xt=l("repeat()"),kt=l(": special #2"),De=c(),d=i("p"),bt=l("Above example will populate a "),ae=i("em"),Ct=l("fixed width"),Pt=l(" child component. In order to make the child components response, repeat()\u2018s second parameter accepts a "),se=i("code"),Dt=l("minmax()"),Ot=l(" function."),Oe=c(),T=i("p"),Tt=l("Example: "),ne=i("code"),St=l("grid-template-columns: repeat(autofill, minmax(200px, 1fr))"),Te=c(),y=i("p"),Ht=l("We can specify that the child components has a "),ie=i("em"),Mt=l("minimum width"),Wt=l(" of 200px."),Se=c(),L=i("p"),qt=l("When narrowing the view, the child component gets smaller than 200px, the grid will reduce the number of columns."),He=c(),B=i("p"),It=l("When widening the view, the child components will widen until another 200px column can fit, at which point another column will be added."),Me=c(),z=i("p"),Lt=l("We now have a grid layout with responsive number of columns."),this.h()},l(e){E=p(e,"H1",{});var s=r(E);qe=a(s,ko),s.forEach(t),re=m(e),h=p(e,"P",{});var F=r(h);Ie=a(F,`There are two main ways to customise the layout of HTML elements / components:
`),A=p(F,"CODE",{});var Jt=r(A);Le=a(Jt,"display: grid"),Jt.forEach(t),Be=a(F," and "),N=p(F,"CODE",{});var Kt=r(N);ze=a(Kt,"display: flex"),Kt.forEach(t),Fe=a(F,"."),F.forEach(t),ce=m(e),S=p(e,"P",{});var Qt=r(S);Re=a(Qt,"This post describes how to achieve a responsive layout that will automatically populate components into a parent component such that the number of columns is dynamic. For example, when viewed on larger screens, there will be 5 columns, but when viewed on narrower screens, it will shrink to one column."),Qt.forEach(t),me=m(e),H=p(e,"P",{});var Ut=r(H);Ae=a(Ut,"TL;DR:"),Ut.forEach(t),fe=m(e),x=p(e,"PRE",{class:!0});var Po=r(x);Po.forEach(t),ue=m(e),M=p(e,"H2",{});var Vt=r(M);Ne=a(Vt,"display: grid"),Vt.forEach(t),he=m(e),f=p(e,"P",{});var w=r(f);Ge=a(w,"By setting the "),G=p(w,"EM",{});var Xt=r(G);je=a(Xt,"parent"),Xt.forEach(t),Je=a(w," component\u2019s CSS property to "),j=p(w,"CODE",{});var Yt=r(j);Ke=a(Yt,"display: grid"),Yt.forEach(t),Qe=a(w,", we are able to control how the "),J=p(w,"EM",{});var Zt=r(J);Ue=a(Zt,"child"),Zt.forEach(t),Ve=a(w," components are arranged. This property itself does not do anything, you will need to specify "),K=p(w,"EM",{});var $t=r(K);Xe=a($t,"how"),$t.forEach(t),Ye=a(w," the components should be arranged."),w.forEach(t),de=m(e),W=p(e,"H2",{});var gt=r(W);Q=p(gt,"CODE",{});var eo=r(Q);Ze=a(eo,"grid-template-columns"),eo.forEach(t),gt.forEach(t),we=m(e),k=p(e,"P",{});var Bt=r(k);U=p(Bt,"CODE",{});var to=r(U);$e=a(to,"grid-template-columns"),to.forEach(t),ge=a(Bt," is one of the CSS property that helps you specify how child components are arranged. The simplest way is to give values corresponding to the size of each column."),Bt.forEach(t),ve=m(e),v=p(e,"P",{});var pe=r(v);et=a(pe,"For example: "),V=p(pe,"CODE",{});var oo=r(V);tt=a(oo,"grid-template-columns: 1fr 1fr 1fr"),oo.forEach(t),ot=a(pe,` will arrange the child components into 3 columns taking equal widths, and if there are more than 3 child components it will flow to the next row.
`),X=p(pe,"EM",{});var lo=r(X);lt=a(lo,"Notice that the number of values you pass in will determine the number of columns in the grid"),lo.forEach(t),pe.forEach(t),Ee=m(e),q=p(e,"H2",{});var ao=r(q);at=a(ao,"repeat()"),ao.forEach(t),ye=m(e),b=p(e,"P",{});var zt=r(b);st=a(zt,"Instead of statically passing in the number of values, there is another equivalent syntax using the repeat() function: "),Y=p(zt,"CODE",{});var so=r(Y);nt=a(so,"grid-template-columns: repeat(3, 1fr)"),so.forEach(t),zt.forEach(t),_e=m(e),C=p(e,"P",{});var Ft=r(C);Z=p(Ft,"CODE",{});var no=r(Z);it=a(no,"repeat()"),no.forEach(t),pt=a(Ft," takes in 2 parameters, the number of times to repeat and the size to repeat."),Ft.forEach(t),xe=m(e),P=p(e,"H3",{});var Rt=r(P);$=p(Rt,"CODE",{});var io=r($);rt=a(io,"repeat()"),io.forEach(t),ct=a(Rt,": special #1"),Rt.forEach(t),ke=m(e),u=p(e,"P",{});var _=r(u);mt=a(_,"Instead of having the number of times as the first parameter, "),g=p(_,"CODE",{});var po=r(g);ft=a(po,"repeat()"),po.forEach(t),ut=a(_," can also take in either of these two keywords: "),ee=p(_,"CODE",{});var ro=r(ee);ht=a(ro,"autofit"),ro.forEach(t),dt=a(_," and "),te=p(_,"CODE",{});var co=r(te);wt=a(co,"autofill"),co.forEach(t),vt=a(_,", as its first parameter."),_.forEach(t),be=m(e),I=p(e,"P",{});var mo=r(I);Et=a(mo,"Both keywords work similarly in that they will populate the maximum number of columns until no more child components can fit, then move on to the next row."),mo.forEach(t),Ce=m(e),D=p(e,"P",{});var At=r(D);yt=a(At,"Example: "),oe=p(At,"CODE",{});var fo=r(oe);_t=a(fo,"grid-template-columns: repeat(autofill, 200px)"),fo.forEach(t),At.forEach(t),Pe=m(e),O=p(e,"H3",{});var Nt=r(O);le=p(Nt,"CODE",{});var uo=r(le);xt=a(uo,"repeat()"),uo.forEach(t),kt=a(Nt,": special #2"),Nt.forEach(t),De=m(e),d=p(e,"P",{});var R=r(d);bt=a(R,"Above example will populate a "),ae=p(R,"EM",{});var ho=r(ae);Ct=a(ho,"fixed width"),ho.forEach(t),Pt=a(R," child component. In order to make the child components response, repeat()\u2018s second parameter accepts a "),se=p(R,"CODE",{});var wo=r(se);Dt=a(wo,"minmax()"),wo.forEach(t),Ot=a(R," function."),R.forEach(t),Oe=m(e),T=p(e,"P",{});var Gt=r(T);Tt=a(Gt,"Example: "),ne=p(Gt,"CODE",{});var vo=r(ne);St=a(vo,"grid-template-columns: repeat(autofill, minmax(200px, 1fr))"),vo.forEach(t),Gt.forEach(t),Te=m(e),y=p(e,"P",{});var We=r(y);Ht=a(We,"We can specify that the child components has a "),ie=p(We,"EM",{});var Eo=r(ie);Mt=a(Eo,"minimum width"),Eo.forEach(t),Wt=a(We," of 200px."),We.forEach(t),Se=m(e),L=p(e,"P",{});var yo=r(L);qt=a(yo,"When narrowing the view, the child component gets smaller than 200px, the grid will reduce the number of columns."),yo.forEach(t),He=m(e),B=p(e,"P",{});var _o=r(B);It=a(_o,"When widening the view, the child components will widen until another 200px column can fit, at which point another column will be added."),_o.forEach(t),Me=m(e),z=p(e,"P",{});var xo=r(z);Lt=a(xo,"We now have a grid layout with responsive number of columns."),xo.forEach(t),this.h()},h(){So(x,"class","language-css")},m(e,s){n(e,E,s),o(E,qe),n(e,re,s),n(e,h,s),o(h,Ie),o(h,A),o(A,Le),o(h,Be),o(h,N),o(N,ze),o(h,Fe),n(e,ce,s),n(e,S,s),o(S,Re),n(e,me,s),n(e,H,s),o(H,Ae),n(e,fe,s),n(e,x,s),x.innerHTML=Co,n(e,ue,s),n(e,M,s),o(M,Ne),n(e,he,s),n(e,f,s),o(f,Ge),o(f,G),o(G,je),o(f,Je),o(f,j),o(j,Ke),o(f,Qe),o(f,J),o(J,Ue),o(f,Ve),o(f,K),o(K,Xe),o(f,Ye),n(e,de,s),n(e,W,s),o(W,Q),o(Q,Ze),n(e,we,s),n(e,k,s),o(k,U),o(U,$e),o(k,ge),n(e,ve,s),n(e,v,s),o(v,et),o(v,V),o(V,tt),o(v,ot),o(v,X),o(X,lt),n(e,Ee,s),n(e,q,s),o(q,at),n(e,ye,s),n(e,b,s),o(b,st),o(b,Y),o(Y,nt),n(e,_e,s),n(e,C,s),o(C,Z),o(Z,it),o(C,pt),n(e,xe,s),n(e,P,s),o(P,$),o($,rt),o(P,ct),n(e,ke,s),n(e,u,s),o(u,mt),o(u,g),o(g,ft),o(u,ut),o(u,ee),o(ee,ht),o(u,dt),o(u,te),o(te,wt),o(u,vt),n(e,be,s),n(e,I,s),o(I,Et),n(e,Ce,s),n(e,D,s),o(D,yt),o(D,oe),o(oe,_t),n(e,Pe,s),n(e,O,s),o(O,le),o(le,xt),o(O,kt),n(e,De,s),n(e,d,s),o(d,bt),o(d,ae),o(ae,Ct),o(d,Pt),o(d,se),o(se,Dt),o(d,Ot),n(e,Oe,s),n(e,T,s),o(T,Tt),o(T,ne),o(ne,St),n(e,Te,s),n(e,y,s),o(y,Ht),o(y,ie),o(ie,Mt),o(y,Wt),n(e,Se,s),n(e,L,s),o(L,qt),n(e,He,s),n(e,B,s),o(B,It),n(e,Me,s),n(e,z,s),o(z,Lt)},p:jt,i:jt,o:jt,d(e){e&&t(E),e&&t(re),e&&t(h),e&&t(ce),e&&t(S),e&&t(me),e&&t(H),e&&t(fe),e&&t(x),e&&t(ue),e&&t(M),e&&t(he),e&&t(f),e&&t(de),e&&t(W),e&&t(we),e&&t(k),e&&t(ve),e&&t(v),e&&t(Ee),e&&t(q),e&&t(ye),e&&t(b),e&&t(_e),e&&t(C),e&&t(xe),e&&t(P),e&&t(ke),e&&t(u),e&&t(be),e&&t(I),e&&t(Ce),e&&t(D),e&&t(Pe),e&&t(O),e&&t(De),e&&t(d),e&&t(Oe),e&&t(T),e&&t(Te),e&&t(y),e&&t(Se),e&&t(L),e&&t(He),e&&t(B),e&&t(Me),e&&t(z)}}}const Mo={title:"CSS Responsive Grid Layout",date:"2022-09-14"},{title:ko,date:qo}=Mo;class Io extends Do{constructor(E){super(),Oo(this,E,null,Ho,To,{})}}export{Io as default,Mo as metadata};
