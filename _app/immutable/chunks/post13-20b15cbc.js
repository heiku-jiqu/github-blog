import{S as Pt,i as Ft,s as Dt,k as o,q as s,a as c,l as r,m as l,r as n,h as a,c as u,n as v,b as i,B as t,A as Ca}from"./index-4cbca6b4.js";function xt(At){let w,Oe,ue,W,Re,fe,O,je,me,R,Se,ye,j,Ve,he,A,Ce,N,ze,He,de,d,Je,g,Le,Ne,G,ge,Ge,ke,m,qe,q,Ye,Ke,Y,Qe,Xe,K,Ze,$e,be,E,ea,Q,aa,ta,ve,k,sa,X,na,oa,Z,ra,la,we,S,pa,Ae,V,ia,Ee,_,ca,$,ua,fa,_e,F,Et=`<code class="language-js"><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create new array buffer of length 16 BYTES</span>
<span class="token comment">// create a view of the buffer, where every 4 bytes represent one uint32</span>
<span class="token keyword">let</span> uint32arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// typedarray can be indexed</span>
uint32arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">322</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uint32arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [322, 0, 0, 0]</span>
<span class="token comment">// note the rest of the values are 0</span>
<span class="token comment">// note that there are only 4 items because len_of_buffer / len_of_uint32 = 4</span>

<span class="token comment">// you can reference the underlying arraybuffer</span>
uint32arr<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>

<span class="token comment">// note that assigning number larger than what the type can hold will overflow</span>
<span class="token keyword">let</span> uint8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this will automatically create an underlying buffer</span>
uint8arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
uint8arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
uint8arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">257</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uint8arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [255, 0, 1]</span></code>`,Be,f,ma,ee,ya,ha,ae,da,ka,te,ba,va,se,wa,Aa,Te,C,Ea,Pe,y,_a,ne,Ba,Ta,oe,Pa,Fa,re,Da,xa,Fe,D,_t=`<code class="language-js"><span class="token keyword">let</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
dv<span class="token punctuation">.</span><span class="token function">setInt8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// at 0 byte offset from start of view, set value to 20</span>
dv<span class="token punctuation">.</span><span class="token function">setFloat32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// at 1 byte offset from start of view, set value to Math.PI</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getInt8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 // at 0 byte offset, read as Int8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getFloat32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.141... // at 1 byte offset, read the next 4 bytes as Float32</span></code>`,De,z,Ia,xe,H,Ma,Ie,h,le,x,Ua,Wa,pe,I,Oa,Ra,ie,M,ja,Sa,ce,U,Va;return{c(){w=o("h1"),Oe=s(wt),ue=c(),W=o("p"),Re=s("When working with binary data in Javascript, there\u2019s a lot of classes that can be potentially used, and they all seem to do the same thing: deal with binary data."),fe=c(),O=o("p"),je=s("What are the nuances and differences between all the different types, and when should we use which class?"),me=c(),R=o("h2"),Se=s("ArrayBuffer"),ye=c(),j=o("p"),Ve=s("The most basic type is the ArrayBuffer."),he=c(),A=o("p"),Ce=s("What is an ArrayBuffer? It is a "),N=o("em"),ze=s("reference"),He=s(" to a fixed-length, contiguous (array of) memory area."),de=c(),d=o("p"),Je=s("An ArrayBuffer can be created with "),g=o("code"),Le=s("new ArrayBuffer(8)"),Ne=s(`, where the input is the number of bytes (length of the memory area) that it references.
When it is created, a contiguous segment of memory will be `),G=o("em"),ge=s("allocated"),Ge=s(", based on the length that was supplied in the input, and it is pre-filled with zeroes."),ke=c(),m=o("p"),qe=s("Note: the word "),q=o("em"),Ye=s("array"),Ke=s(" used above is not related to the normal Javascript "),Y=o("code"),Qe=s("Array"),Xe=s(", but rather indicates a "),K=o("em"),Ze=s("memory array"),$e=s(" as in the context of lower level programming concept."),be=c(),E=o("p"),ea=s("Note: "),Q=o("em"),aa=s("allocation"),ta=s(" of memory means to reserve (that segment of) memory in that is available in the computer\u2019s RAM."),ve=c(),k=o("p"),sa=s("ArrayBuffers are just references to a memory location, and it is "),X=o("strong"),na=s("not possible to manipulate the bytes directly using ArrayBuffer"),oa=s(" (although it is possible to "),Z=o("em"),ra=s("resize"),la=s(` the buffer).
Furthermore, the bytes in this memory location by itself is meaningless, just a bunch of 1s and 0s.`),we=c(),S=o("p"),pa=s("In order to manipulate the bytes and give them meaning, we must do it through a view (using TypedArrays or DataViews)"),Ae=c(),V=o("h2"),ia=s("TypedArray"),Ee=c(),_=o("p"),ca=s(`TypedArrays are an umbrella term for a bunch of different classes such as Uint8Array, Float64Array, etc.
They are \u2018views\u2019 into the array buffer and give `),$=o("em"),ua=s("meaning"),fa=s(` to the bytes that exists in the ArrayBuffers.
For instance, a Uint8Array will imply that every 8 bits (or 1 byte) is an integer. And this same relationship applies for other TypedArray, i.e. Uint16Array means an integer every 16 bits (2 bytes), Float64Array means a decimal point number every 64 bits (8 bytes), etc.`),_e=c(),F=o("pre"),Be=c(),f=o("p"),ma=s("TypedArray has most of the regular Array methods like "),ee=o("code"),ya=s("map"),ha=s(", "),ae=o("code"),da=s("slice"),ka=s(", "),te=o("code"),ba=s("find"),va=s(", "),se=o("code"),wa=s("reduce"),Aa=s(" etc."),Te=c(),C=o("h2"),Ea=s("DataView"),Pe=c(),y=o("p"),_a=s("DataViews are flexible alternatives to TypedArrays as they don\u2019t declare "),ne=o("em"),Ba=s("upfront"),Ta=s(" what type, but rather the type is specified during usage of the view using its "),oe=o("code"),Pa=s(".get"),Fa=s(" and "),re=o("code"),Da=s(".set"),xa=s(" typed methods."),Fe=c(),D=o("pre"),De=c(),z=o("p"),Ia=s("From the above example, you can see DataView can be useful when the buffer contains multiple types."),xe=c(),H=o("h1"),Ma=s("References / Further Reading"),Ie=c(),h=o("ul"),le=o("li"),x=o("a"),Ua=s("File"),Wa=c(),pe=o("li"),I=o("a"),Oa=s("Blob"),Ra=c(),ie=o("li"),M=o("a"),ja=s("ArrayBuffer"),Sa=c(),ce=o("li"),U=o("a"),Va=s("TypedArray"),this.h()},l(e){w=r(e,"H1",{});var p=l(w);Oe=n(p,wt),p.forEach(a),ue=u(e),W=r(e,"P",{});var za=l(W);Re=n(za,"When working with binary data in Javascript, there\u2019s a lot of classes that can be potentially used, and they all seem to do the same thing: deal with binary data."),za.forEach(a),fe=u(e),O=r(e,"P",{});var Ha=l(O);je=n(Ha,"What are the nuances and differences between all the different types, and when should we use which class?"),Ha.forEach(a),me=u(e),R=r(e,"H2",{});var Ja=l(R);Se=n(Ja,"ArrayBuffer"),Ja.forEach(a),ye=u(e),j=r(e,"P",{});var La=l(j);Ve=n(La,"The most basic type is the ArrayBuffer."),La.forEach(a),he=u(e),A=r(e,"P",{});var Me=l(A);Ce=n(Me,"What is an ArrayBuffer? It is a "),N=r(Me,"EM",{});var Na=l(N);ze=n(Na,"reference"),Na.forEach(a),He=n(Me," to a fixed-length, contiguous (array of) memory area."),Me.forEach(a),de=u(e),d=r(e,"P",{});var J=l(d);Je=n(J,"An ArrayBuffer can be created with "),g=r(J,"CODE",{});var ga=l(g);Le=n(ga,"new ArrayBuffer(8)"),ga.forEach(a),Ne=n(J,`, where the input is the number of bytes (length of the memory area) that it references.
When it is created, a contiguous segment of memory will be `),G=r(J,"EM",{});var Ga=l(G);ge=n(Ga,"allocated"),Ga.forEach(a),Ge=n(J,", based on the length that was supplied in the input, and it is pre-filled with zeroes."),J.forEach(a),ke=u(e),m=r(e,"P",{});var B=l(m);qe=n(B,"Note: the word "),q=r(B,"EM",{});var qa=l(q);Ye=n(qa,"array"),qa.forEach(a),Ke=n(B," used above is not related to the normal Javascript "),Y=r(B,"CODE",{});var Ya=l(Y);Qe=n(Ya,"Array"),Ya.forEach(a),Xe=n(B,", but rather indicates a "),K=r(B,"EM",{});var Ka=l(K);Ze=n(Ka,"memory array"),Ka.forEach(a),$e=n(B," as in the context of lower level programming concept."),B.forEach(a),be=u(e),E=r(e,"P",{});var Ue=l(E);ea=n(Ue,"Note: "),Q=r(Ue,"EM",{});var Qa=l(Q);aa=n(Qa,"allocation"),Qa.forEach(a),ta=n(Ue," of memory means to reserve (that segment of) memory in that is available in the computer\u2019s RAM."),Ue.forEach(a),ve=u(e),k=r(e,"P",{});var L=l(k);sa=n(L,"ArrayBuffers are just references to a memory location, and it is "),X=r(L,"STRONG",{});var Xa=l(X);na=n(Xa,"not possible to manipulate the bytes directly using ArrayBuffer"),Xa.forEach(a),oa=n(L," (although it is possible to "),Z=r(L,"EM",{});var Za=l(Z);ra=n(Za,"resize"),Za.forEach(a),la=n(L,` the buffer).
Furthermore, the bytes in this memory location by itself is meaningless, just a bunch of 1s and 0s.`),L.forEach(a),we=u(e),S=r(e,"P",{});var $a=l(S);pa=n($a,"In order to manipulate the bytes and give them meaning, we must do it through a view (using TypedArrays or DataViews)"),$a.forEach(a),Ae=u(e),V=r(e,"H2",{});var et=l(V);ia=n(et,"TypedArray"),et.forEach(a),Ee=u(e),_=r(e,"P",{});var We=l(_);ca=n(We,`TypedArrays are an umbrella term for a bunch of different classes such as Uint8Array, Float64Array, etc.
They are \u2018views\u2019 into the array buffer and give `),$=r(We,"EM",{});var at=l($);ua=n(at,"meaning"),at.forEach(a),fa=n(We,` to the bytes that exists in the ArrayBuffers.
For instance, a Uint8Array will imply that every 8 bits (or 1 byte) is an integer. And this same relationship applies for other TypedArray, i.e. Uint16Array means an integer every 16 bits (2 bytes), Float64Array means a decimal point number every 64 bits (8 bytes), etc.`),We.forEach(a),_e=u(e),F=r(e,"PRE",{class:!0});var Bt=l(F);Bt.forEach(a),Be=u(e),f=r(e,"P",{});var b=l(f);ma=n(b,"TypedArray has most of the regular Array methods like "),ee=r(b,"CODE",{});var tt=l(ee);ya=n(tt,"map"),tt.forEach(a),ha=n(b,", "),ae=r(b,"CODE",{});var st=l(ae);da=n(st,"slice"),st.forEach(a),ka=n(b,", "),te=r(b,"CODE",{});var nt=l(te);ba=n(nt,"find"),nt.forEach(a),va=n(b,", "),se=r(b,"CODE",{});var ot=l(se);wa=n(ot,"reduce"),ot.forEach(a),Aa=n(b," etc."),b.forEach(a),Te=u(e),C=r(e,"H2",{});var rt=l(C);Ea=n(rt,"DataView"),rt.forEach(a),Pe=u(e),y=r(e,"P",{});var T=l(y);_a=n(T,"DataViews are flexible alternatives to TypedArrays as they don\u2019t declare "),ne=r(T,"EM",{});var lt=l(ne);Ba=n(lt,"upfront"),lt.forEach(a),Ta=n(T," what type, but rather the type is specified during usage of the view using its "),oe=r(T,"CODE",{});var pt=l(oe);Pa=n(pt,".get"),pt.forEach(a),Fa=n(T," and "),re=r(T,"CODE",{});var it=l(re);Da=n(it,".set"),it.forEach(a),xa=n(T," typed methods."),T.forEach(a),Fe=u(e),D=r(e,"PRE",{class:!0});var Tt=l(D);Tt.forEach(a),De=u(e),z=r(e,"P",{});var ct=l(z);Ia=n(ct,"From the above example, you can see DataView can be useful when the buffer contains multiple types."),ct.forEach(a),xe=u(e),H=r(e,"H1",{});var ut=l(H);Ma=n(ut,"References / Further Reading"),ut.forEach(a),Ie=u(e),h=r(e,"UL",{});var P=l(h);le=r(P,"LI",{});var ft=l(le);x=r(ft,"A",{href:!0,rel:!0});var mt=l(x);Ua=n(mt,"File"),mt.forEach(a),ft.forEach(a),Wa=u(P),pe=r(P,"LI",{});var yt=l(pe);I=r(yt,"A",{href:!0,rel:!0});var ht=l(I);Oa=n(ht,"Blob"),ht.forEach(a),yt.forEach(a),Ra=u(P),ie=r(P,"LI",{});var dt=l(ie);M=r(dt,"A",{href:!0,rel:!0});var kt=l(M);ja=n(kt,"ArrayBuffer"),kt.forEach(a),dt.forEach(a),Sa=u(P),ce=r(P,"LI",{});var bt=l(ce);U=r(bt,"A",{href:!0,rel:!0});var vt=l(U);Va=n(vt,"TypedArray"),vt.forEach(a),bt.forEach(a),P.forEach(a),this.h()},h(){v(F,"class","language-js"),v(D,"class","language-js"),v(x,"href","https://developer.mozilla.org/en-US/docs/Web/API/File"),v(x,"rel","nofollow"),v(I,"href","https://developer.mozilla.org/en-US/docs/Web/API/Blob"),v(I,"rel","nofollow"),v(M,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"),v(M,"rel","nofollow"),v(U,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"),v(U,"rel","nofollow")},m(e,p){i(e,w,p),t(w,Oe),i(e,ue,p),i(e,W,p),t(W,Re),i(e,fe,p),i(e,O,p),t(O,je),i(e,me,p),i(e,R,p),t(R,Se),i(e,ye,p),i(e,j,p),t(j,Ve),i(e,he,p),i(e,A,p),t(A,Ce),t(A,N),t(N,ze),t(A,He),i(e,de,p),i(e,d,p),t(d,Je),t(d,g),t(g,Le),t(d,Ne),t(d,G),t(G,ge),t(d,Ge),i(e,ke,p),i(e,m,p),t(m,qe),t(m,q),t(q,Ye),t(m,Ke),t(m,Y),t(Y,Qe),t(m,Xe),t(m,K),t(K,Ze),t(m,$e),i(e,be,p),i(e,E,p),t(E,ea),t(E,Q),t(Q,aa),t(E,ta),i(e,ve,p),i(e,k,p),t(k,sa),t(k,X),t(X,na),t(k,oa),t(k,Z),t(Z,ra),t(k,la),i(e,we,p),i(e,S,p),t(S,pa),i(e,Ae,p),i(e,V,p),t(V,ia),i(e,Ee,p),i(e,_,p),t(_,ca),t(_,$),t($,ua),t(_,fa),i(e,_e,p),i(e,F,p),F.innerHTML=Et,i(e,Be,p),i(e,f,p),t(f,ma),t(f,ee),t(ee,ya),t(f,ha),t(f,ae),t(ae,da),t(f,ka),t(f,te),t(te,ba),t(f,va),t(f,se),t(se,wa),t(f,Aa),i(e,Te,p),i(e,C,p),t(C,Ea),i(e,Pe,p),i(e,y,p),t(y,_a),t(y,ne),t(ne,Ba),t(y,Ta),t(y,oe),t(oe,Pa),t(y,Fa),t(y,re),t(re,Da),t(y,xa),i(e,Fe,p),i(e,D,p),D.innerHTML=_t,i(e,De,p),i(e,z,p),t(z,Ia),i(e,xe,p),i(e,H,p),t(H,Ma),i(e,Ie,p),i(e,h,p),t(h,le),t(le,x),t(x,Ua),t(h,Wa),t(h,pe),t(pe,I),t(I,Oa),t(h,Ra),t(h,ie),t(ie,M),t(M,ja),t(h,Sa),t(h,ce),t(ce,U),t(U,Va)},p:Ca,i:Ca,o:Ca,d(e){e&&a(w),e&&a(ue),e&&a(W),e&&a(fe),e&&a(O),e&&a(me),e&&a(R),e&&a(ye),e&&a(j),e&&a(he),e&&a(A),e&&a(de),e&&a(d),e&&a(ke),e&&a(m),e&&a(be),e&&a(E),e&&a(ve),e&&a(k),e&&a(we),e&&a(S),e&&a(Ae),e&&a(V),e&&a(Ee),e&&a(_),e&&a(_e),e&&a(F),e&&a(Be),e&&a(f),e&&a(Te),e&&a(C),e&&a(Pe),e&&a(y),e&&a(Fe),e&&a(D),e&&a(De),e&&a(z),e&&a(xe),e&&a(H),e&&a(Ie),e&&a(h)}}}const It={title:"Javascript File, Blob, ArrayBuffer, TypedArray, DataView",date:"2023-05-09"},{title:wt,date:Ut}=It;class Wt extends Pt{constructor(w){super(),Ft(this,w,null,xt,Dt,{})}}export{Wt as default,It as metadata};
