import{S as Bt,i as Lt,s as Ut,k as a,q as o,a as k,l as c,m as l,r as s,h as n,c as E,n as zt,b as u,B as e,A as Dt}from"./index-39c5cc75.js";function Ft(qt){let m,U,A,_,z,R,d,F,O,K,N,y,Q,W,q,f,Z,M,$,g,x,tt,et,I,w,nt,J,p,ot,P,st,at,S,ct,lt,T,pt,it,Y,rt,ut,G,dt,ft,V,vt,mt,b,ht,kt,B,h,It=`<code class="language-js"><span class="token comment">// Create a new DOMPoint object with clientX and clientY as its x and y coordinate</span>
<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">DOMPoint</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a DOMMatrix that transforms screen coordinates to SVG coordinates</span>
<span class="token keyword">let</span> transform_matrix <span class="token operator">=</span> svg<span class="token punctuation">.</span><span class="token function">getScreenCTM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the matrix in DOMPoint.matrixTransform()</span>
<span class="token keyword">let</span> new_point <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matrixTransform</span><span class="token punctuation">(</span>transform_matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> new_point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,L,v,X,Et,_t,j,wt,Ct;return{c(){m=a("h1"),U=o(Rt),A=k(),_=a("h2"),z=o("Motivation"),R=k(),d=a("p"),F=o("Javascript DOM events lets you capture mouse position relative to top left corner of your viewport through "),O=a("code"),K=o("clientX"),N=o("/"),y=a("code"),Q=o("clientY"),W=o(" event properties."),q=k(),f=a("p"),Z=o("If you are drawing SVGs and need to position SVG elements in on the mouse pointer, you will need to convert the coordinates given by "),M=a("code"),$=o("clientX"),g=o("/"),x=a("code"),tt=o("clientY"),et=o(" into the SVG\u2019s coordinates."),I=k(),w=a("h2"),nt=o("Solution"),J=k(),p=a("p"),ot=o("You will need 3 things: - The "),P=a("code"),st=o("clientX"),at=o(" and "),S=a("code"),ct=o("clientY"),lt=o(" properties from the "),T=a("code"),pt=o("MouseEvent"),it=o(" - A "),Y=a("code"),rt=o("DOMPoint"),ut=o(" object created using "),G=a("code"),dt=o("DOMPoint()"),ft=o(", or "),V=a("code"),vt=o("SVGPoint"),mt=o(" object - Reference to the "),b=a("code"),ht=o("<svg>"),kt=o(" node"),B=k(),h=a("pre"),L=k(),v=a("p"),X=a("code"),Et=o("CTM"),_t=o(" stands for Current Transformation Matrix, and maps the local coordinate system into the viewport coordinate system. However, since we want the opposite, we have to call "),j=a("code"),wt=o(".inverse()"),Ct=o(" to inverse the matrix to get the opposite effect."),this.h()},l(t){m=c(t,"H1",{});var i=l(m);U=s(i,Rt),i.forEach(n),A=E(t),_=c(t,"H2",{});var Ot=l(_);z=s(Ot,"Motivation"),Ot.forEach(n),R=E(t),d=c(t,"P",{});var C=l(d);F=s(C,"Javascript DOM events lets you capture mouse position relative to top left corner of your viewport through "),O=c(C,"CODE",{});var yt=l(O);K=s(yt,"clientX"),yt.forEach(n),N=s(C,"/"),y=c(C,"CODE",{});var Mt=l(y);Q=s(Mt,"clientY"),Mt.forEach(n),W=s(C," event properties."),C.forEach(n),q=E(t),f=c(t,"P",{});var D=l(f);Z=s(D,"If you are drawing SVGs and need to position SVG elements in on the mouse pointer, you will need to convert the coordinates given by "),M=c(D,"CODE",{});var xt=l(M);$=s(xt,"clientX"),xt.forEach(n),g=s(D,"/"),x=c(D,"CODE",{});var Pt=l(x);tt=s(Pt,"clientY"),Pt.forEach(n),et=s(D," into the SVG\u2019s coordinates."),D.forEach(n),I=E(t),w=c(t,"H2",{});var St=l(w);nt=s(St,"Solution"),St.forEach(n),J=E(t),p=c(t,"P",{});var r=l(p);ot=s(r,"You will need 3 things: - The "),P=c(r,"CODE",{});var Tt=l(P);st=s(Tt,"clientX"),Tt.forEach(n),at=s(r," and "),S=c(r,"CODE",{});var Yt=l(S);ct=s(Yt,"clientY"),Yt.forEach(n),lt=s(r," properties from the "),T=c(r,"CODE",{});var Gt=l(T);pt=s(Gt,"MouseEvent"),Gt.forEach(n),it=s(r," - A "),Y=c(r,"CODE",{});var Vt=l(Y);rt=s(Vt,"DOMPoint"),Vt.forEach(n),ut=s(r," object created using "),G=c(r,"CODE",{});var bt=l(G);dt=s(bt,"DOMPoint()"),bt.forEach(n),ft=s(r,", or "),V=c(r,"CODE",{});var Xt=l(V);vt=s(Xt,"SVGPoint"),Xt.forEach(n),mt=s(r," object - Reference to the "),b=c(r,"CODE",{});var jt=l(b);ht=s(jt,"<svg>"),jt.forEach(n),kt=s(r," node"),r.forEach(n),B=E(t),h=c(t,"PRE",{class:!0});var Jt=l(h);Jt.forEach(n),L=E(t),v=c(t,"P",{});var H=l(v);X=c(H,"CODE",{});var Ht=l(X);Et=s(Ht,"CTM"),Ht.forEach(n),_t=s(H," stands for Current Transformation Matrix, and maps the local coordinate system into the viewport coordinate system. However, since we want the opposite, we have to call "),j=c(H,"CODE",{});var At=l(j);wt=s(At,".inverse()"),At.forEach(n),Ct=s(H," to inverse the matrix to get the opposite effect."),H.forEach(n),this.h()},h(){zt(h,"class","language-js")},m(t,i){u(t,m,i),e(m,U),u(t,A,i),u(t,_,i),e(_,z),u(t,R,i),u(t,d,i),e(d,F),e(d,O),e(O,K),e(d,N),e(d,y),e(y,Q),e(d,W),u(t,q,i),u(t,f,i),e(f,Z),e(f,M),e(M,$),e(f,g),e(f,x),e(x,tt),e(f,et),u(t,I,i),u(t,w,i),e(w,nt),u(t,J,i),u(t,p,i),e(p,ot),e(p,P),e(P,st),e(p,at),e(p,S),e(S,ct),e(p,lt),e(p,T),e(T,pt),e(p,it),e(p,Y),e(Y,rt),e(p,ut),e(p,G),e(G,dt),e(p,ft),e(p,V),e(V,vt),e(p,mt),e(p,b),e(b,ht),e(p,kt),u(t,B,i),u(t,h,i),h.innerHTML=It,u(t,L,i),u(t,v,i),e(v,X),e(X,Et),e(v,_t),e(v,j),e(j,wt),e(v,Ct)},p:Dt,i:Dt,o:Dt,d(t){t&&n(m),t&&n(A),t&&n(_),t&&n(R),t&&n(d),t&&n(q),t&&n(f),t&&n(I),t&&n(w),t&&n(J),t&&n(p),t&&n(B),t&&n(h),t&&n(L),t&&n(v)}}}const Kt={title:"Converting Coordinates to Different Coordinate System",date:"2022-11-11"},{title:Rt,date:Qt}=Kt;class Wt extends Bt{constructor(m){super(),Lt(this,m,null,Ft,Ut,{})}}export{Wt as default,Kt as metadata};
