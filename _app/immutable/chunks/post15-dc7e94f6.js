import{S as _h,i as Ah,s as Ih,k as r,q as n,a as p,l as a,m as o,r as h,h as t,c as f,n as E,b as l,B as i,A as so}from"./index-4cbca6b4.js";function Hh(Ch){let P,js,oi,G,Xs,ni,j,Vs,hi,X,Ws,pi,V,Zs,fi,c,ht,Js,Qs,pt,Ys,$s,ft,el,tl,yt,il,sl,ct,ll,yi,W,rl,ci,Z,al,mi,J,ol,ui,Q,nl,di,Y,hl,vi,$,pl,bi,ee,fl,wi,te,yl,Ei,ie,cl,ki,se,ml,Si,le,ul,Ci,re,dl,_i,k,vl,mt,bl,wl,ut,El,kl,Ai,ae,Sl,Ii,oe,Cl,Hi,L,_l,dt,Al,Il,xi,g,Hl,S,xl,vt,Pl,Ll,v,Tl,bt,Ml,Rl,wt,Dl,Bl,Et,zl,Ol,Pi,ne,Fl,Li,he,gl,Ti,pe,Kl,Mi,fe,Nl,Ri,ye,Ul,Di,ce,ql,Bi,me,Gl,zi,ue,jl,Oi,de,Xl,Fi,T,Vl,kt,Wl,Zl,gi,ve,Jl,Ki,m,St,Ql,Yl,Ct,$l,er,_t,tr,ir,At,sr,lr,It,rr,Ni,be,ar,Ui,C,Ht,or,nr,xt,hr,pr,Pt,fr,qi,we,yr,Gi,Ee,cr,ji,ke,mr,Xi,M,Lt,ur,dr,Tt,vr,Vi,Se,br,Wi,R,Mt,wr,Er,Rt,kr,Zi,Ce,Sr,Ji,_e,Cr,Qi,Ae,_r,Yi,Ie,Ar,$i,b,Dt,Ir,Hr,Bt,xr,Pr,zt,Lr,Tr,Ot,Mr,es,He,Rr,ts,xe,Dr,is,Pe,Br,ss,D,Ft,zr,Or,gt,Fr,ls,Le,gr,rs,Te,Kr,as,Me,Nr,os,Re,Ur,ns,De,qr,hs,Be,Gr,ps,ze,jr,fs,Oe,Xr,ys,Fe,Vr,cs,y,Kt,Wr,Zr,Nt,Jr,Qr,Ut,Yr,$r,qt,ea,ta,Gt,ia,sa,jt,la,ra,Xt,aa,ms,ge,oa,us,Ke,na,ds,Ne,ha,vs,u,Vt,pa,fa,Wt,ya,ca,Zt,ma,ua,Jt,da,va,Qt,ba,bs,Ue,Yt,wa,ws,qe,Ea,Es,Ge,ka,ks,je,Sa,Ss,w,$t,Ca,_a,ei,Aa,Ia,ti,Ha,xa,ii,Pa,Cs,_,La,K,Ta,Ma,N,Ra,Da,_s,Xe,Ba,As,A,si,za,Oa,li,Fa,ga,ri,Ka,Is,Ve,Na,Hs,We,Ua,xs,Ze,qa,Ps,Je,Ga,Ls,Qe,ja,Ts,Ye,Xa,Ms,$e,Va,Rs,et,Wa,Ds,tt,Za,Bs,it,Ja,zs,st,Qa,Os,lt,U,Ya,Fs,B,$a,q,eo,to;return{c(){P=r("h1"),js=n(Sh),oi=p(),G=r("p"),Xs=n(`When working with sensitive data, it is inevitable to come across cryptography terms scattered here and there, be it for storing data, sharing data, de-identifying data, etc.
This post aggregates some of the common terms that I\u2019ve come across related to cryptography in the software world, and also how the concepts relate to each other.`),ni=p(),j=r("h2"),Vs=n("Goals of Cryptography"),hi=p(),X=r("p"),Ws=n("Before diving into many of the cryptographic terms/acronyms used, it is useful to have a general overview of cryptography."),pi=p(),V=r("p"),Zs=n("Broadly, there are some goals of cryptography which are related to information security:"),fi=p(),c=r("ul"),ht=r("li"),Js=n("Confidentiality: Data that is secret is not able to be accessed/read by unauthorized users"),Qs=p(),pt=r("li"),Ys=n("Integrity: Data is not altered by unauthorized users"),$s=p(),ft=r("li"),el=n("Authenticity: Data is sent/received between intended parties"),tl=p(),yt=r("li"),il=n("Non-repudiation: Action(s) done by a party cannot be refuted (e.g. I should not be able to send a message and later refute that the message wasn\u2019t sent by me)"),sl=p(),ct=r("li"),ll=n("Availability: Data is available to authorized users in a timely manner"),yi=p(),W=r("p"),rl=n("Note that some concepts do overlap with each other, for example if a protocol provides Authenticity, it also provides Integrity since it confirms that no unauthorized users has been involved in the communication channel."),ci=p(),Z=r("h2"),al=n("Encryption, Decryption"),mi=p(),J=r("p"),ol=n(`Encryption is the process of turning plaintext into cyphertext.
Decryption is the other way round, turning cyphertext back into plaintext.`),ui=p(),Q=r("h2"),nl=n("Plaintext"),di=p(),Y=r("p"),hl=n(`Plaintext is the data/information that that is unencrypted.
This includes any type of binary data, not just textual data.`),vi=p(),$=r("h2"),pl=n("Cyphertext"),bi=p(),ee=r("p"),fl=n(`Cyphertexts are the output of encrypting plaintext.
The bits will be scrambled in such a way that it does not resemble its original plaintext form anymore.`),wi=p(),te=r("h2"),yl=n("Cyphers"),Ei=p(),ie=r("p"),cl=n("Cyphers refer to the algorithms that is used to transform plaintext into cyphertext (encrypt), or cyphertext into plaintext (decrypt)"),ki=p(),se=r("h2"),ml=n("Types of Algorithms / Cyphers"),Si=p(),le=r("p"),ul=n(`There are 3 broad categories of encryption: Hash functions, Symmetric algorithms, and Asymmetric algorithms.
These 3 categories form the building blocks of cryptography in computing, and can be combined/pieced together in ways to provide more novel use cases.`),Ci=p(),re=r("h3"),dl=n("Hash Functions"),_i=p(),k=r("p"),vl=n("Hash functions are "),mt=r("strong"),bl=n("one-way"),wl=n(` functions that can only encrypt.
When an input passes through a hash function, the output will be a relatively small, fixed sized number of bytes called the `),ut=r("em"),El=n("digest"),kl=n(`.
It is designed to be impossible to decrypt and go from the digest back to the input (hence \u201Cone-way\u201D).
However, the important property is that the digest is designed to not clash when different inputs are used (technically it is extremely low probability).
Meaning, even if your input changes one single bit, passing it through a hash function will give a completely different result.
This makes it useful to verify whether anything that you have has been tampered with.`),Ai=p(),ae=r("p"),Sl=n("Common examples include: SHA, Poly1305 (used in TLS)."),Ii=p(),oe=r("h4"),Cl=n("SHA"),Hi=p(),L=r("p"),_l=n("An example of a common hash function is "),dt=r("strong"),Al=n("SHA"),Il=n(` which stands for Secure Hash Algorithm.
SHA currently has 4 generations: SHA-0 to SHA-3. SHA-0 and SHA-1 are already considered insecure by today\u2019s standards and should not be used.`),xi=p(),g=r("p"),Hl=n(`Within the SHA-2 and SHA-3 families, there are different variants that differ based on the size of the output.
Variants have naming conventions of \u201CSHA-`),S=r("size"),xl=n("\u201D for SHA-2 and \u201CSHA"),vt=r("strong"),Pl=n("3"),Ll=n("-"),v=r("size"),Tl=n(`\u201D for SHA-3.
For example, \u201CSHA-256\u201D refers to SHA-2 variant that generates 256bit length output, and \u201CSHA`),bt=r("strong"),Ml=n("3"),Rl=n("-256\u201D refers to SHA-"),wt=r("strong"),Dl=n("3"),Bl=n(` variant that generates 256bit length output.
`),Et=r("em"),zl=n("Note that there are no variants for SHA-0 and SHA-1"),Ol=n("."),Pi=p(),ne=r("h3"),Fl=n("Symmetric Algorithms"),Li=p(),he=r("p"),gl=n(`Symmetric algorithms (aka private key cryptography) are algorithms where you pass in your data and a key (which is generated, akin to the \u201Cpassword\u201D), and it will encrypt the data as output.
To decrypt, pass in the cyphertext as well as the same key, and it will generate the original plaintext data.`),Ti=p(),pe=r("p"),Kl=n("The term \u201Csymmetric\u201D comes from the fact that both encryption and decryption uses the same key, and the term \u201Cprivate key\u201D comes from the fact that the same key which you used to encrypt must be shared to whoever needs to decrypt."),Mi=p(),fe=r("p"),Nl=n("An important property of symmetric algorithms is it is very fast compared to asymmetric algorithms, and of course the ability to get back the original data from cyphertext."),Ri=p(),ye=r("p"),Ul=n("There are two broad categories of symmetric algorithms: block cyphers and stream cyphers."),Di=p(),ce=r("h4"),ql=n("Block Cyphers"),Bi=p(),me=r("p"),Gl=n("Block cyphers, as the name suggests, operate by encrypting the plaintext in fixed-length blocks, and the leftover bits will be padded to the size of the blocks."),zi=p(),ue=r("p"),jl=n("Common examples include: AES, DES."),Oi=p(),de=r("h5"),Xl=n("Mode of Operation"),Fi=p(),T=r("p"),Vl=n("Since block cyphers are only able to encrypt one block of fixed number of bits (e.g. 256 bits), there is a need to determine how to actually repeat this one block operation on the entire plaintext data. This is known as the block cypher\u2019s "),kt=r("em"),Wl=n("mode of operation"),Zl=n("."),gi=p(),ve=r("p"),Jl=n("Some common modes of operation include:"),Ki=p(),m=r("ul"),St=r("li"),Ql=n("CBC (Cypher Block Chaining)"),Yl=p(),Ct=r("li"),$l=n("CFB (Cypher FeedBack)"),er=p(),_t=r("li"),tr=n("OFB (Output FeedBack)"),ir=p(),At=r("li"),sr=n("ECB (Electronic CodeBook)"),lr=p(),It=r("li"),rr=n("CTR (Counter)"),Ni=p(),be=r("p"),ar=n("AEAD modes:"),Ui=p(),C=r("ul"),Ht=r("li"),or=n("GCM (Galois Counter Mode)"),nr=p(),xt=r("li"),hr=n("CCM (Counter with CBC-MAC)"),pr=p(),Pt=r("li"),fr=n("SIV (Synthetic Initialisation Vector)"),qi=p(),we=r("h4"),yr=n("Stream Cyphers"),Gi=p(),Ee=r("p"),cr=n(`Stream cyphers work by flipping the bits of a plaintext one bit at a time using the XOR operator against another sequence of bits (known as the keystream)
Every bit of the plaintext is XOR-ed against the corresponding bit of the keystream.
The keystream is generated pseudo-randomly by the algorithm, and typically is initialised with a seed value.
The same seed value will produce the same keystream which in turn lets the receiver decrypt the cyphertext.
This means that the seed value is the secret key, and it has to be generated randomly and should not be reused.`),ji=p(),ke=r("p"),mr=n("Benefits:"),Xi=p(),M=r("ul"),Lt=r("li"),ur=n("Fast, built on XOR operations instead of complicated math algorithms"),dr=p(),Tt=r("li"),vr=n("Ability to decrypt any chunk instead of the whole file (e.g. for video seeking)"),Vi=p(),Se=r("p"),br=n("Examples of Stream Cyphers:"),Wi=p(),R=r("ul"),Mt=r("li"),wr=n("RC4/ARCFOUR/ARC4 (older versions of SSL/TLS, but not recommended)"),Er=p(),Rt=r("li"),kr=n("ChaCha20 (used in TLS)"),Zi=p(),Ce=r("h3"),Sr=n("Asymmetric Algorithms"),Ji=p(),_e=r("p"),Cr=n("aka public key cryptography"),Qi=p(),Ae=r("p"),_r=n("Asymmetric algorithms works by generating a key pair: a public key and a private key."),Yi=p(),Ie=r("p"),Ar=n("The two keys in the key pair are mathematically linked, such that it allows unique properties:"),$i=p(),b=r("ul"),Dt=r("li"),Ir=n("Anything encrypted by the public key can only be decrypted by the private key"),Hr=p(),Bt=r("li"),xr=n("Anything encrypted by the private key can only be decrypted by the public key"),Pr=p(),zt=r("li"),Lr=n("Note: Cyphertext using private key != Cyphertext using public key"),Tr=p(),Ot=r("li"),Mr=n("It is practically impossible to reverse engineer the private key from the public key"),es=p(),He=r("p"),Rr=n("Allows anyone (\u2018public\u2019) with the public key (which is freely distributed) to send secret (encrypted) messages to the owner of the private key."),ts=p(),xe=r("p"),Dr=n(`The second property on the surface seems useless, since theres not point in encrypting something that the public can decrypt.
However, this property actually enables digital signatures.`),is=p(),Pe=r("p"),Br=n("Examples of asymmetric algorithms:"),ss=p(),D=r("ul"),Ft=r("li"),zr=n("RSA (Rivest-Shamir-Adleman)"),Or=p(),gt=r("li"),Fr=n("ECC (Eliptic Curve Cryptography)"),ls=p(),Le=r("h3"),gr=n("Hybrid Systems"),rs=p(),Te=r("p"),Kr=n(`Hybrid systems are just implementations that makes use of multiple types of cryptography.
For example, TLS (SSL) uses both Asymmetric and Symmetric algorithm for communicate between server and clients.
This allows systems to leverage the speed of Symmetric algorithms while still gaining the utilities of Asymmetric algorithms.`),as=p(),Me=r("h3"),Nr=n("Strength of Algorithm"),os=p(),Re=r("h2"),Ur=n("Private / Public Keys"),ns=p(),De=r("h2"),qr=n("AEAD"),hs=p(),Be=r("p"),Gr=n("Authenticated Encryption with Associated Data"),ps=p(),ze=r("h2"),jr=n("Digital Signatures"),fs=p(),Oe=r("p"),Xr=n("Digital Signatures help to prove that the information sent to the recipient has not been tampered with in any way."),ys=p(),Fe=r("p"),Vr=n("Digital Signatures work by:"),cs=p(),y=r("ol"),Kt=r("li"),Wr=n("Sender distributes public key to recipient"),Zr=p(),Nt=r("li"),Jr=n("Sender hashes message to obtain a digest of the message"),Qr=p(),Ut=r("li"),Yr=n("Sender encrypts digest with his private key (The output is the Signature!)"),$r=p(),qt=r("li"),ea=n("Sender sends recipient the message and digest"),ta=p(),Gt=r("li"),ia=n("Recipient hashes message from Sender"),sa=p(),jt=r("li"),la=n("Recipient uses Sender\u2019s public key to decrypt the Signature to obtain Sender\u2019s Hash"),ra=p(),Xt=r("li"),aa=n("Recipient compares Recipient\u2019s hash and Sender\u2019s hash, if they are the same, then Recipient knows that the message has not been tempered with and that the Sender indeed sent that message, not anyone else"),ms=p(),ge=r("h2"),oa=n("Message Integrity Code (MIC)"),us=p(),Ke=r("p"),na=n("aka Message Authentication Code (MAC)"),ds=p(),Ne=r("p"),ha=n(`Like Digital Signatures, MIC helps to prove that the information sent between parties has not been tampered with in any way.
However, the difference is that MIC uses the same secret key to generate and verify the MIC, whereas digital signatures are generated with private key and verified with public key.`),vs=p(),u=r("ol"),Vt=r("li"),pa=n("Sender and Receiver agrees on secret key"),fa=p(),Wt=r("li"),ya=n("Sender inputs message + secret key into MIC Algorithm to obtain the MIC"),ca=p(),Zt=r("li"),ma=n("Sender sends recipient the message and MIC"),ua=p(),Jt=r("li"),da=n("Recipient inputs message + secret key into MIC Algorithm to obtain his own MIC"),va=p(),Qt=r("li"),ba=n("Recipient compares Recipient\u2019s MIC and Sender\u2019s MIC, if they are the same, then Recipient knows that the message has not been tempered with and that the Sender indeed sent that message, not anyone else"),bs=p(),Ue=r("p"),Yt=r("em"),wa=n("Note: this has no relation with MAC Address which stands for Media Access Control Address."),ws=p(),qe=r("h2"),Ea=n("Public Key Certificates"),Es=p(),Ge=r("p"),ka=n("At a high level, a Certificate helps to (mostly) guarantee that a person is not an impostor."),ks=p(),je=r("p"),Sa=n("Certificate includes information about:"),Ss=p(),w=r("ul"),$t=r("li"),Ca=n("public key"),_a=p(),ei=r("li"),Aa=n("subject, aka identity of the key\u2019s owner"),Ia=p(),ti=r("li"),Ha=n("issuer, aka entity that verified the certificate\u2019s contents"),xa=p(),ii=r("li"),Pa=n("signature, aka the issuer will hash the ceritifcate contents and encrypt the hash with its own private key"),Cs=p(),_=r("p"),La=n(`Helps to address this issue: \u201CHow do I know the subject I am communicating with is who they say they are?\u201C.
More concretely, \u201CHow do I know if this particular server that will be serving me web pages to `),K=r("a"),Ta=n("www.abcxyz.com"),Ma=n(" is actually the server of "),N=r("a"),Ra=n("www.abcxyz.com"),Da=n(" and not just some other random server?\u201D"),_s=p(),Xe=r("p"),Ba=n("Other names:"),As=p(),A=r("ul"),si=r("li"),za=n("Digital Certificates"),Oa=p(),li=r("li"),Fa=n("Identity Certificates"),ga=p(),ri=r("li"),Ka=n("Certificates"),Is=p(),Ve=r("h3"),Na=n("Certificate Authority"),Hs=p(),We=r("p"),Ua=n(`A Certificate Authority (CA) is an entity that signs and issues digital certificates.
They act as a third party to assert that digital certificates used by servers have been verified by them.
Users that visit servers with certificates can verify the certificate\u2019s authenticity by decrypting the signature with CA\u2019s public key, and matching the result with the hash of the certificate\u2019s contents.
If they match, then users can be relatively assured that the server is who they say they are.`),xs=p(),Ze=r("h2"),qa=n("PKCS"),Ps=p(),Je=r("p"),Ga=n("PKCS stands for Public Key Cryptography Standards, which includes a number of standards that are adopted in cryptographic systems to ensure that everyone is on the same page."),Ls=p(),Qe=r("p"),ja=n("Usually, people will reference specific PKCS standards such as PKCS#7, PKCS#8, PKCS#11, etc."),Ts=p(),Ye=r("h2"),Xa=n("S/MIME"),Ms=p(),$e=r("h2"),Va=n("Fingerprint"),Rs=p(),et=r("p"),Wa=n(`Fingerprints are similar to hash functions, in that they take an arbitrarily large input and produces a relatively small output that uniquely identifies the input.
However, the difference is that fingerprints have no constraints whether the output can be reverse engineered to get the input.
In other words, all hash functions are fingerprints, but not all fingerprints are hash functions.`),Ds=p(),tt=r("h2"),Za=n("pkcs .cer .pfx pem"),Bs=p(),it=r("h2"),Ja=n("X.509"),zs=p(),st=r("h1"),Qa=n("Links"),Os=p(),lt=r("p"),U=r("a"),Ya=n("TLS"),Fs=p(),B=r("p"),$a=n("("),q=r("a"),eo=n("https://crypto.stackexchange.com/questions/87078/stream-cipher-and-block-cipher-usage-in-network-data-encryption"),to=n(")"),this.h()},l(e){P=a(e,"H1",{});var s=o(P);js=h(s,Sh),s.forEach(t),oi=f(e),G=a(e,"P",{});var lo=o(G);Xs=h(lo,`When working with sensitive data, it is inevitable to come across cryptography terms scattered here and there, be it for storing data, sharing data, de-identifying data, etc.
This post aggregates some of the common terms that I\u2019ve come across related to cryptography in the software world, and also how the concepts relate to each other.`),lo.forEach(t),ni=f(e),j=a(e,"H2",{});var ro=o(j);Vs=h(ro,"Goals of Cryptography"),ro.forEach(t),hi=f(e),X=a(e,"P",{});var ao=o(X);Ws=h(ao,"Before diving into many of the cryptographic terms/acronyms used, it is useful to have a general overview of cryptography."),ao.forEach(t),pi=f(e),V=a(e,"P",{});var oo=o(V);Zs=h(oo,"Broadly, there are some goals of cryptography which are related to information security:"),oo.forEach(t),fi=f(e),c=a(e,"UL",{});var I=o(c);ht=a(I,"LI",{});var no=o(ht);Js=h(no,"Confidentiality: Data that is secret is not able to be accessed/read by unauthorized users"),no.forEach(t),Qs=f(I),pt=a(I,"LI",{});var ho=o(pt);Ys=h(ho,"Integrity: Data is not altered by unauthorized users"),ho.forEach(t),$s=f(I),ft=a(I,"LI",{});var po=o(ft);el=h(po,"Authenticity: Data is sent/received between intended parties"),po.forEach(t),tl=f(I),yt=a(I,"LI",{});var fo=o(yt);il=h(fo,"Non-repudiation: Action(s) done by a party cannot be refuted (e.g. I should not be able to send a message and later refute that the message wasn\u2019t sent by me)"),fo.forEach(t),sl=f(I),ct=a(I,"LI",{});var yo=o(ct);ll=h(yo,"Availability: Data is available to authorized users in a timely manner"),yo.forEach(t),I.forEach(t),yi=f(e),W=a(e,"P",{});var co=o(W);rl=h(co,"Note that some concepts do overlap with each other, for example if a protocol provides Authenticity, it also provides Integrity since it confirms that no unauthorized users has been involved in the communication channel."),co.forEach(t),ci=f(e),Z=a(e,"H2",{});var mo=o(Z);al=h(mo,"Encryption, Decryption"),mo.forEach(t),mi=f(e),J=a(e,"P",{});var uo=o(J);ol=h(uo,`Encryption is the process of turning plaintext into cyphertext.
Decryption is the other way round, turning cyphertext back into plaintext.`),uo.forEach(t),ui=f(e),Q=a(e,"H2",{});var vo=o(Q);nl=h(vo,"Plaintext"),vo.forEach(t),di=f(e),Y=a(e,"P",{});var bo=o(Y);hl=h(bo,`Plaintext is the data/information that that is unencrypted.
This includes any type of binary data, not just textual data.`),bo.forEach(t),vi=f(e),$=a(e,"H2",{});var wo=o($);pl=h(wo,"Cyphertext"),wo.forEach(t),bi=f(e),ee=a(e,"P",{});var Eo=o(ee);fl=h(Eo,`Cyphertexts are the output of encrypting plaintext.
The bits will be scrambled in such a way that it does not resemble its original plaintext form anymore.`),Eo.forEach(t),wi=f(e),te=a(e,"H2",{});var ko=o(te);yl=h(ko,"Cyphers"),ko.forEach(t),Ei=f(e),ie=a(e,"P",{});var So=o(ie);cl=h(So,"Cyphers refer to the algorithms that is used to transform plaintext into cyphertext (encrypt), or cyphertext into plaintext (decrypt)"),So.forEach(t),ki=f(e),se=a(e,"H2",{});var Co=o(se);ml=h(Co,"Types of Algorithms / Cyphers"),Co.forEach(t),Si=f(e),le=a(e,"P",{});var _o=o(le);ul=h(_o,`There are 3 broad categories of encryption: Hash functions, Symmetric algorithms, and Asymmetric algorithms.
These 3 categories form the building blocks of cryptography in computing, and can be combined/pieced together in ways to provide more novel use cases.`),_o.forEach(t),Ci=f(e),re=a(e,"H3",{});var Ao=o(re);dl=h(Ao,"Hash Functions"),Ao.forEach(t),_i=f(e),k=a(e,"P",{});var rt=o(k);vl=h(rt,"Hash functions are "),mt=a(rt,"STRONG",{});var Io=o(mt);bl=h(Io,"one-way"),Io.forEach(t),wl=h(rt,` functions that can only encrypt.
When an input passes through a hash function, the output will be a relatively small, fixed sized number of bytes called the `),ut=a(rt,"EM",{});var Ho=o(ut);El=h(Ho,"digest"),Ho.forEach(t),kl=h(rt,`.
It is designed to be impossible to decrypt and go from the digest back to the input (hence \u201Cone-way\u201D).
However, the important property is that the digest is designed to not clash when different inputs are used (technically it is extremely low probability).
Meaning, even if your input changes one single bit, passing it through a hash function will give a completely different result.
This makes it useful to verify whether anything that you have has been tampered with.`),rt.forEach(t),Ai=f(e),ae=a(e,"P",{});var xo=o(ae);Sl=h(xo,"Common examples include: SHA, Poly1305 (used in TLS)."),xo.forEach(t),Ii=f(e),oe=a(e,"H4",{});var Po=o(oe);Cl=h(Po,"SHA"),Po.forEach(t),Hi=f(e),L=a(e,"P",{});var gs=o(L);_l=h(gs,"An example of a common hash function is "),dt=a(gs,"STRONG",{});var Lo=o(dt);Al=h(Lo,"SHA"),Lo.forEach(t),Il=h(gs,` which stands for Secure Hash Algorithm.
SHA currently has 4 generations: SHA-0 to SHA-3. SHA-0 and SHA-1 are already considered insecure by today\u2019s standards and should not be used.`),gs.forEach(t),xi=f(e),g=a(e,"P",{});var io=o(g);Hl=h(io,`Within the SHA-2 and SHA-3 families, there are different variants that differ based on the size of the output.
Variants have naming conventions of \u201CSHA-`),S=a(io,"SIZE",{of:!0,output:!0});var ai=o(S);xl=h(ai,"\u201D for SHA-2 and \u201CSHA"),vt=a(ai,"STRONG",{});var To=o(vt);Pl=h(To,"3"),To.forEach(t),Ll=h(ai,"-"),v=a(ai,"SIZE",{of:!0,output:!0});var z=o(v);Tl=h(z,`\u201D for SHA-3.
For example, \u201CSHA-256\u201D refers to SHA-2 variant that generates 256bit length output, and \u201CSHA`),bt=a(z,"STRONG",{});var Mo=o(bt);Ml=h(Mo,"3"),Mo.forEach(t),Rl=h(z,"-256\u201D refers to SHA-"),wt=a(z,"STRONG",{});var Ro=o(wt);Dl=h(Ro,"3"),Ro.forEach(t),Bl=h(z,` variant that generates 256bit length output.
`),Et=a(z,"EM",{});var Do=o(Et);zl=h(Do,"Note that there are no variants for SHA-0 and SHA-1"),Do.forEach(t),Ol=h(z,"."),z.forEach(t),ai.forEach(t),io.forEach(t),Pi=f(e),ne=a(e,"H3",{});var Bo=o(ne);Fl=h(Bo,"Symmetric Algorithms"),Bo.forEach(t),Li=f(e),he=a(e,"P",{});var zo=o(he);gl=h(zo,`Symmetric algorithms (aka private key cryptography) are algorithms where you pass in your data and a key (which is generated, akin to the \u201Cpassword\u201D), and it will encrypt the data as output.
To decrypt, pass in the cyphertext as well as the same key, and it will generate the original plaintext data.`),zo.forEach(t),Ti=f(e),pe=a(e,"P",{});var Oo=o(pe);Kl=h(Oo,"The term \u201Csymmetric\u201D comes from the fact that both encryption and decryption uses the same key, and the term \u201Cprivate key\u201D comes from the fact that the same key which you used to encrypt must be shared to whoever needs to decrypt."),Oo.forEach(t),Mi=f(e),fe=a(e,"P",{});var Fo=o(fe);Nl=h(Fo,"An important property of symmetric algorithms is it is very fast compared to asymmetric algorithms, and of course the ability to get back the original data from cyphertext."),Fo.forEach(t),Ri=f(e),ye=a(e,"P",{});var go=o(ye);Ul=h(go,"There are two broad categories of symmetric algorithms: block cyphers and stream cyphers."),go.forEach(t),Di=f(e),ce=a(e,"H4",{});var Ko=o(ce);ql=h(Ko,"Block Cyphers"),Ko.forEach(t),Bi=f(e),me=a(e,"P",{});var No=o(me);Gl=h(No,"Block cyphers, as the name suggests, operate by encrypting the plaintext in fixed-length blocks, and the leftover bits will be padded to the size of the blocks."),No.forEach(t),zi=f(e),ue=a(e,"P",{});var Uo=o(ue);jl=h(Uo,"Common examples include: AES, DES."),Uo.forEach(t),Oi=f(e),de=a(e,"H5",{});var qo=o(de);Xl=h(qo,"Mode of Operation"),qo.forEach(t),Fi=f(e),T=a(e,"P",{});var Ks=o(T);Vl=h(Ks,"Since block cyphers are only able to encrypt one block of fixed number of bits (e.g. 256 bits), there is a need to determine how to actually repeat this one block operation on the entire plaintext data. This is known as the block cypher\u2019s "),kt=a(Ks,"EM",{});var Go=o(kt);Wl=h(Go,"mode of operation"),Go.forEach(t),Zl=h(Ks,"."),Ks.forEach(t),gi=f(e),ve=a(e,"P",{});var jo=o(ve);Jl=h(jo,"Some common modes of operation include:"),jo.forEach(t),Ki=f(e),m=a(e,"UL",{});var H=o(m);St=a(H,"LI",{});var Xo=o(St);Ql=h(Xo,"CBC (Cypher Block Chaining)"),Xo.forEach(t),Yl=f(H),Ct=a(H,"LI",{});var Vo=o(Ct);$l=h(Vo,"CFB (Cypher FeedBack)"),Vo.forEach(t),er=f(H),_t=a(H,"LI",{});var Wo=o(_t);tr=h(Wo,"OFB (Output FeedBack)"),Wo.forEach(t),ir=f(H),At=a(H,"LI",{});var Zo=o(At);sr=h(Zo,"ECB (Electronic CodeBook)"),Zo.forEach(t),lr=f(H),It=a(H,"LI",{});var Jo=o(It);rr=h(Jo,"CTR (Counter)"),Jo.forEach(t),H.forEach(t),Ni=f(e),be=a(e,"P",{});var Qo=o(be);ar=h(Qo,"AEAD modes:"),Qo.forEach(t),Ui=f(e),C=a(e,"UL",{});var at=o(C);Ht=a(at,"LI",{});var Yo=o(Ht);or=h(Yo,"GCM (Galois Counter Mode)"),Yo.forEach(t),nr=f(at),xt=a(at,"LI",{});var $o=o(xt);hr=h($o,"CCM (Counter with CBC-MAC)"),$o.forEach(t),pr=f(at),Pt=a(at,"LI",{});var en=o(Pt);fr=h(en,"SIV (Synthetic Initialisation Vector)"),en.forEach(t),at.forEach(t),qi=f(e),we=a(e,"H4",{});var tn=o(we);yr=h(tn,"Stream Cyphers"),tn.forEach(t),Gi=f(e),Ee=a(e,"P",{});var sn=o(Ee);cr=h(sn,`Stream cyphers work by flipping the bits of a plaintext one bit at a time using the XOR operator against another sequence of bits (known as the keystream)
Every bit of the plaintext is XOR-ed against the corresponding bit of the keystream.
The keystream is generated pseudo-randomly by the algorithm, and typically is initialised with a seed value.
The same seed value will produce the same keystream which in turn lets the receiver decrypt the cyphertext.
This means that the seed value is the secret key, and it has to be generated randomly and should not be reused.`),sn.forEach(t),ji=f(e),ke=a(e,"P",{});var ln=o(ke);mr=h(ln,"Benefits:"),ln.forEach(t),Xi=f(e),M=a(e,"UL",{});var Ns=o(M);Lt=a(Ns,"LI",{});var rn=o(Lt);ur=h(rn,"Fast, built on XOR operations instead of complicated math algorithms"),rn.forEach(t),dr=f(Ns),Tt=a(Ns,"LI",{});var an=o(Tt);vr=h(an,"Ability to decrypt any chunk instead of the whole file (e.g. for video seeking)"),an.forEach(t),Ns.forEach(t),Vi=f(e),Se=a(e,"P",{});var on=o(Se);br=h(on,"Examples of Stream Cyphers:"),on.forEach(t),Wi=f(e),R=a(e,"UL",{});var Us=o(R);Mt=a(Us,"LI",{});var nn=o(Mt);wr=h(nn,"RC4/ARCFOUR/ARC4 (older versions of SSL/TLS, but not recommended)"),nn.forEach(t),Er=f(Us),Rt=a(Us,"LI",{});var hn=o(Rt);kr=h(hn,"ChaCha20 (used in TLS)"),hn.forEach(t),Us.forEach(t),Zi=f(e),Ce=a(e,"H3",{});var pn=o(Ce);Sr=h(pn,"Asymmetric Algorithms"),pn.forEach(t),Ji=f(e),_e=a(e,"P",{});var fn=o(_e);Cr=h(fn,"aka public key cryptography"),fn.forEach(t),Qi=f(e),Ae=a(e,"P",{});var yn=o(Ae);_r=h(yn,"Asymmetric algorithms works by generating a key pair: a public key and a private key."),yn.forEach(t),Yi=f(e),Ie=a(e,"P",{});var cn=o(Ie);Ar=h(cn,"The two keys in the key pair are mathematically linked, such that it allows unique properties:"),cn.forEach(t),$i=f(e),b=a(e,"UL",{});var O=o(b);Dt=a(O,"LI",{});var mn=o(Dt);Ir=h(mn,"Anything encrypted by the public key can only be decrypted by the private key"),mn.forEach(t),Hr=f(O),Bt=a(O,"LI",{});var un=o(Bt);xr=h(un,"Anything encrypted by the private key can only be decrypted by the public key"),un.forEach(t),Pr=f(O),zt=a(O,"LI",{});var dn=o(zt);Lr=h(dn,"Note: Cyphertext using private key != Cyphertext using public key"),dn.forEach(t),Tr=f(O),Ot=a(O,"LI",{});var vn=o(Ot);Mr=h(vn,"It is practically impossible to reverse engineer the private key from the public key"),vn.forEach(t),O.forEach(t),es=f(e),He=a(e,"P",{});var bn=o(He);Rr=h(bn,"Allows anyone (\u2018public\u2019) with the public key (which is freely distributed) to send secret (encrypted) messages to the owner of the private key."),bn.forEach(t),ts=f(e),xe=a(e,"P",{});var wn=o(xe);Dr=h(wn,`The second property on the surface seems useless, since theres not point in encrypting something that the public can decrypt.
However, this property actually enables digital signatures.`),wn.forEach(t),is=f(e),Pe=a(e,"P",{});var En=o(Pe);Br=h(En,"Examples of asymmetric algorithms:"),En.forEach(t),ss=f(e),D=a(e,"UL",{});var qs=o(D);Ft=a(qs,"LI",{});var kn=o(Ft);zr=h(kn,"RSA (Rivest-Shamir-Adleman)"),kn.forEach(t),Or=f(qs),gt=a(qs,"LI",{});var Sn=o(gt);Fr=h(Sn,"ECC (Eliptic Curve Cryptography)"),Sn.forEach(t),qs.forEach(t),ls=f(e),Le=a(e,"H3",{});var Cn=o(Le);gr=h(Cn,"Hybrid Systems"),Cn.forEach(t),rs=f(e),Te=a(e,"P",{});var _n=o(Te);Kr=h(_n,`Hybrid systems are just implementations that makes use of multiple types of cryptography.
For example, TLS (SSL) uses both Asymmetric and Symmetric algorithm for communicate between server and clients.
This allows systems to leverage the speed of Symmetric algorithms while still gaining the utilities of Asymmetric algorithms.`),_n.forEach(t),as=f(e),Me=a(e,"H3",{});var An=o(Me);Nr=h(An,"Strength of Algorithm"),An.forEach(t),os=f(e),Re=a(e,"H2",{});var In=o(Re);Ur=h(In,"Private / Public Keys"),In.forEach(t),ns=f(e),De=a(e,"H2",{});var Hn=o(De);qr=h(Hn,"AEAD"),Hn.forEach(t),hs=f(e),Be=a(e,"P",{});var xn=o(Be);Gr=h(xn,"Authenticated Encryption with Associated Data"),xn.forEach(t),ps=f(e),ze=a(e,"H2",{});var Pn=o(ze);jr=h(Pn,"Digital Signatures"),Pn.forEach(t),fs=f(e),Oe=a(e,"P",{});var Ln=o(Oe);Xr=h(Ln,"Digital Signatures help to prove that the information sent to the recipient has not been tampered with in any way."),Ln.forEach(t),ys=f(e),Fe=a(e,"P",{});var Tn=o(Fe);Vr=h(Tn,"Digital Signatures work by:"),Tn.forEach(t),cs=f(e),y=a(e,"OL",{});var d=o(y);Kt=a(d,"LI",{});var Mn=o(Kt);Wr=h(Mn,"Sender distributes public key to recipient"),Mn.forEach(t),Zr=f(d),Nt=a(d,"LI",{});var Rn=o(Nt);Jr=h(Rn,"Sender hashes message to obtain a digest of the message"),Rn.forEach(t),Qr=f(d),Ut=a(d,"LI",{});var Dn=o(Ut);Yr=h(Dn,"Sender encrypts digest with his private key (The output is the Signature!)"),Dn.forEach(t),$r=f(d),qt=a(d,"LI",{});var Bn=o(qt);ea=h(Bn,"Sender sends recipient the message and digest"),Bn.forEach(t),ta=f(d),Gt=a(d,"LI",{});var zn=o(Gt);ia=h(zn,"Recipient hashes message from Sender"),zn.forEach(t),sa=f(d),jt=a(d,"LI",{});var On=o(jt);la=h(On,"Recipient uses Sender\u2019s public key to decrypt the Signature to obtain Sender\u2019s Hash"),On.forEach(t),ra=f(d),Xt=a(d,"LI",{});var Fn=o(Xt);aa=h(Fn,"Recipient compares Recipient\u2019s hash and Sender\u2019s hash, if they are the same, then Recipient knows that the message has not been tempered with and that the Sender indeed sent that message, not anyone else"),Fn.forEach(t),d.forEach(t),ms=f(e),ge=a(e,"H2",{});var gn=o(ge);oa=h(gn,"Message Integrity Code (MIC)"),gn.forEach(t),us=f(e),Ke=a(e,"P",{});var Kn=o(Ke);na=h(Kn,"aka Message Authentication Code (MAC)"),Kn.forEach(t),ds=f(e),Ne=a(e,"P",{});var Nn=o(Ne);ha=h(Nn,`Like Digital Signatures, MIC helps to prove that the information sent between parties has not been tampered with in any way.
However, the difference is that MIC uses the same secret key to generate and verify the MIC, whereas digital signatures are generated with private key and verified with public key.`),Nn.forEach(t),vs=f(e),u=a(e,"OL",{});var x=o(u);Vt=a(x,"LI",{});var Un=o(Vt);pa=h(Un,"Sender and Receiver agrees on secret key"),Un.forEach(t),fa=f(x),Wt=a(x,"LI",{});var qn=o(Wt);ya=h(qn,"Sender inputs message + secret key into MIC Algorithm to obtain the MIC"),qn.forEach(t),ca=f(x),Zt=a(x,"LI",{});var Gn=o(Zt);ma=h(Gn,"Sender sends recipient the message and MIC"),Gn.forEach(t),ua=f(x),Jt=a(x,"LI",{});var jn=o(Jt);da=h(jn,"Recipient inputs message + secret key into MIC Algorithm to obtain his own MIC"),jn.forEach(t),va=f(x),Qt=a(x,"LI",{});var Xn=o(Qt);ba=h(Xn,"Recipient compares Recipient\u2019s MIC and Sender\u2019s MIC, if they are the same, then Recipient knows that the message has not been tempered with and that the Sender indeed sent that message, not anyone else"),Xn.forEach(t),x.forEach(t),bs=f(e),Ue=a(e,"P",{});var Vn=o(Ue);Yt=a(Vn,"EM",{});var Wn=o(Yt);wa=h(Wn,"Note: this has no relation with MAC Address which stands for Media Access Control Address."),Wn.forEach(t),Vn.forEach(t),ws=f(e),qe=a(e,"H2",{});var Zn=o(qe);Ea=h(Zn,"Public Key Certificates"),Zn.forEach(t),Es=f(e),Ge=a(e,"P",{});var Jn=o(Ge);ka=h(Jn,"At a high level, a Certificate helps to (mostly) guarantee that a person is not an impostor."),Jn.forEach(t),ks=f(e),je=a(e,"P",{});var Qn=o(je);Sa=h(Qn,"Certificate includes information about:"),Qn.forEach(t),Ss=f(e),w=a(e,"UL",{});var F=o(w);$t=a(F,"LI",{});var Yn=o($t);Ca=h(Yn,"public key"),Yn.forEach(t),_a=f(F),ei=a(F,"LI",{});var $n=o(ei);Aa=h($n,"subject, aka identity of the key\u2019s owner"),$n.forEach(t),Ia=f(F),ti=a(F,"LI",{});var eh=o(ti);Ha=h(eh,"issuer, aka entity that verified the certificate\u2019s contents"),eh.forEach(t),xa=f(F),ii=a(F,"LI",{});var th=o(ii);Pa=h(th,"signature, aka the issuer will hash the ceritifcate contents and encrypt the hash with its own private key"),th.forEach(t),F.forEach(t),Cs=f(e),_=a(e,"P",{});var ot=o(_);La=h(ot,`Helps to address this issue: \u201CHow do I know the subject I am communicating with is who they say they are?\u201C.
More concretely, \u201CHow do I know if this particular server that will be serving me web pages to `),K=a(ot,"A",{href:!0,rel:!0});var ih=o(K);Ta=h(ih,"www.abcxyz.com"),ih.forEach(t),Ma=h(ot," is actually the server of "),N=a(ot,"A",{href:!0,rel:!0});var sh=o(N);Ra=h(sh,"www.abcxyz.com"),sh.forEach(t),Da=h(ot," and not just some other random server?\u201D"),ot.forEach(t),_s=f(e),Xe=a(e,"P",{});var lh=o(Xe);Ba=h(lh,"Other names:"),lh.forEach(t),As=f(e),A=a(e,"UL",{});var nt=o(A);si=a(nt,"LI",{});var rh=o(si);za=h(rh,"Digital Certificates"),rh.forEach(t),Oa=f(nt),li=a(nt,"LI",{});var ah=o(li);Fa=h(ah,"Identity Certificates"),ah.forEach(t),ga=f(nt),ri=a(nt,"LI",{});var oh=o(ri);Ka=h(oh,"Certificates"),oh.forEach(t),nt.forEach(t),Is=f(e),Ve=a(e,"H3",{});var nh=o(Ve);Na=h(nh,"Certificate Authority"),nh.forEach(t),Hs=f(e),We=a(e,"P",{});var hh=o(We);Ua=h(hh,`A Certificate Authority (CA) is an entity that signs and issues digital certificates.
They act as a third party to assert that digital certificates used by servers have been verified by them.
Users that visit servers with certificates can verify the certificate\u2019s authenticity by decrypting the signature with CA\u2019s public key, and matching the result with the hash of the certificate\u2019s contents.
If they match, then users can be relatively assured that the server is who they say they are.`),hh.forEach(t),xs=f(e),Ze=a(e,"H2",{});var ph=o(Ze);qa=h(ph,"PKCS"),ph.forEach(t),Ps=f(e),Je=a(e,"P",{});var fh=o(Je);Ga=h(fh,"PKCS stands for Public Key Cryptography Standards, which includes a number of standards that are adopted in cryptographic systems to ensure that everyone is on the same page."),fh.forEach(t),Ls=f(e),Qe=a(e,"P",{});var yh=o(Qe);ja=h(yh,"Usually, people will reference specific PKCS standards such as PKCS#7, PKCS#8, PKCS#11, etc."),yh.forEach(t),Ts=f(e),Ye=a(e,"H2",{});var ch=o(Ye);Xa=h(ch,"S/MIME"),ch.forEach(t),Ms=f(e),$e=a(e,"H2",{});var mh=o($e);Va=h(mh,"Fingerprint"),mh.forEach(t),Rs=f(e),et=a(e,"P",{});var uh=o(et);Wa=h(uh,`Fingerprints are similar to hash functions, in that they take an arbitrarily large input and produces a relatively small output that uniquely identifies the input.
However, the difference is that fingerprints have no constraints whether the output can be reverse engineered to get the input.
In other words, all hash functions are fingerprints, but not all fingerprints are hash functions.`),uh.forEach(t),Ds=f(e),tt=a(e,"H2",{});var dh=o(tt);Za=h(dh,"pkcs .cer .pfx pem"),dh.forEach(t),Bs=f(e),it=a(e,"H2",{});var vh=o(it);Ja=h(vh,"X.509"),vh.forEach(t),zs=f(e),st=a(e,"H1",{});var bh=o(st);Qa=h(bh,"Links"),bh.forEach(t),Os=f(e),lt=a(e,"P",{});var wh=o(lt);U=a(wh,"A",{href:!0,rel:!0});var Eh=o(U);Ya=h(Eh,"TLS"),Eh.forEach(t),wh.forEach(t),Fs=f(e),B=a(e,"P",{});var Gs=o(B);$a=h(Gs,"("),q=a(Gs,"A",{href:!0,rel:!0});var kh=o(q);eo=h(kh,"https://crypto.stackexchange.com/questions/87078/stream-cipher-and-block-cipher-usage-in-network-data-encryption"),kh.forEach(t),to=h(Gs,")"),Gs.forEach(t),this.h()},h(){E(v,"of",""),E(v,"output",""),E(S,"of",""),E(S,"output",""),E(K,"href","http://www.abcxyz.com"),E(K,"rel","nofollow"),E(N,"href","http://www.abcxyz.com"),E(N,"rel","nofollow"),E(U,"href","https://www.rfc-editor.org/rfc/rfc8446"),E(U,"rel","nofollow"),E(q,"href","https://crypto.stackexchange.com/questions/87078/stream-cipher-and-block-cipher-usage-in-network-data-encryption"),E(q,"rel","nofollow")},m(e,s){l(e,P,s),i(P,js),l(e,oi,s),l(e,G,s),i(G,Xs),l(e,ni,s),l(e,j,s),i(j,Vs),l(e,hi,s),l(e,X,s),i(X,Ws),l(e,pi,s),l(e,V,s),i(V,Zs),l(e,fi,s),l(e,c,s),i(c,ht),i(ht,Js),i(c,Qs),i(c,pt),i(pt,Ys),i(c,$s),i(c,ft),i(ft,el),i(c,tl),i(c,yt),i(yt,il),i(c,sl),i(c,ct),i(ct,ll),l(e,yi,s),l(e,W,s),i(W,rl),l(e,ci,s),l(e,Z,s),i(Z,al),l(e,mi,s),l(e,J,s),i(J,ol),l(e,ui,s),l(e,Q,s),i(Q,nl),l(e,di,s),l(e,Y,s),i(Y,hl),l(e,vi,s),l(e,$,s),i($,pl),l(e,bi,s),l(e,ee,s),i(ee,fl),l(e,wi,s),l(e,te,s),i(te,yl),l(e,Ei,s),l(e,ie,s),i(ie,cl),l(e,ki,s),l(e,se,s),i(se,ml),l(e,Si,s),l(e,le,s),i(le,ul),l(e,Ci,s),l(e,re,s),i(re,dl),l(e,_i,s),l(e,k,s),i(k,vl),i(k,mt),i(mt,bl),i(k,wl),i(k,ut),i(ut,El),i(k,kl),l(e,Ai,s),l(e,ae,s),i(ae,Sl),l(e,Ii,s),l(e,oe,s),i(oe,Cl),l(e,Hi,s),l(e,L,s),i(L,_l),i(L,dt),i(dt,Al),i(L,Il),l(e,xi,s),l(e,g,s),i(g,Hl),i(g,S),i(S,xl),i(S,vt),i(vt,Pl),i(S,Ll),i(S,v),i(v,Tl),i(v,bt),i(bt,Ml),i(v,Rl),i(v,wt),i(wt,Dl),i(v,Bl),i(v,Et),i(Et,zl),i(v,Ol),l(e,Pi,s),l(e,ne,s),i(ne,Fl),l(e,Li,s),l(e,he,s),i(he,gl),l(e,Ti,s),l(e,pe,s),i(pe,Kl),l(e,Mi,s),l(e,fe,s),i(fe,Nl),l(e,Ri,s),l(e,ye,s),i(ye,Ul),l(e,Di,s),l(e,ce,s),i(ce,ql),l(e,Bi,s),l(e,me,s),i(me,Gl),l(e,zi,s),l(e,ue,s),i(ue,jl),l(e,Oi,s),l(e,de,s),i(de,Xl),l(e,Fi,s),l(e,T,s),i(T,Vl),i(T,kt),i(kt,Wl),i(T,Zl),l(e,gi,s),l(e,ve,s),i(ve,Jl),l(e,Ki,s),l(e,m,s),i(m,St),i(St,Ql),i(m,Yl),i(m,Ct),i(Ct,$l),i(m,er),i(m,_t),i(_t,tr),i(m,ir),i(m,At),i(At,sr),i(m,lr),i(m,It),i(It,rr),l(e,Ni,s),l(e,be,s),i(be,ar),l(e,Ui,s),l(e,C,s),i(C,Ht),i(Ht,or),i(C,nr),i(C,xt),i(xt,hr),i(C,pr),i(C,Pt),i(Pt,fr),l(e,qi,s),l(e,we,s),i(we,yr),l(e,Gi,s),l(e,Ee,s),i(Ee,cr),l(e,ji,s),l(e,ke,s),i(ke,mr),l(e,Xi,s),l(e,M,s),i(M,Lt),i(Lt,ur),i(M,dr),i(M,Tt),i(Tt,vr),l(e,Vi,s),l(e,Se,s),i(Se,br),l(e,Wi,s),l(e,R,s),i(R,Mt),i(Mt,wr),i(R,Er),i(R,Rt),i(Rt,kr),l(e,Zi,s),l(e,Ce,s),i(Ce,Sr),l(e,Ji,s),l(e,_e,s),i(_e,Cr),l(e,Qi,s),l(e,Ae,s),i(Ae,_r),l(e,Yi,s),l(e,Ie,s),i(Ie,Ar),l(e,$i,s),l(e,b,s),i(b,Dt),i(Dt,Ir),i(b,Hr),i(b,Bt),i(Bt,xr),i(b,Pr),i(b,zt),i(zt,Lr),i(b,Tr),i(b,Ot),i(Ot,Mr),l(e,es,s),l(e,He,s),i(He,Rr),l(e,ts,s),l(e,xe,s),i(xe,Dr),l(e,is,s),l(e,Pe,s),i(Pe,Br),l(e,ss,s),l(e,D,s),i(D,Ft),i(Ft,zr),i(D,Or),i(D,gt),i(gt,Fr),l(e,ls,s),l(e,Le,s),i(Le,gr),l(e,rs,s),l(e,Te,s),i(Te,Kr),l(e,as,s),l(e,Me,s),i(Me,Nr),l(e,os,s),l(e,Re,s),i(Re,Ur),l(e,ns,s),l(e,De,s),i(De,qr),l(e,hs,s),l(e,Be,s),i(Be,Gr),l(e,ps,s),l(e,ze,s),i(ze,jr),l(e,fs,s),l(e,Oe,s),i(Oe,Xr),l(e,ys,s),l(e,Fe,s),i(Fe,Vr),l(e,cs,s),l(e,y,s),i(y,Kt),i(Kt,Wr),i(y,Zr),i(y,Nt),i(Nt,Jr),i(y,Qr),i(y,Ut),i(Ut,Yr),i(y,$r),i(y,qt),i(qt,ea),i(y,ta),i(y,Gt),i(Gt,ia),i(y,sa),i(y,jt),i(jt,la),i(y,ra),i(y,Xt),i(Xt,aa),l(e,ms,s),l(e,ge,s),i(ge,oa),l(e,us,s),l(e,Ke,s),i(Ke,na),l(e,ds,s),l(e,Ne,s),i(Ne,ha),l(e,vs,s),l(e,u,s),i(u,Vt),i(Vt,pa),i(u,fa),i(u,Wt),i(Wt,ya),i(u,ca),i(u,Zt),i(Zt,ma),i(u,ua),i(u,Jt),i(Jt,da),i(u,va),i(u,Qt),i(Qt,ba),l(e,bs,s),l(e,Ue,s),i(Ue,Yt),i(Yt,wa),l(e,ws,s),l(e,qe,s),i(qe,Ea),l(e,Es,s),l(e,Ge,s),i(Ge,ka),l(e,ks,s),l(e,je,s),i(je,Sa),l(e,Ss,s),l(e,w,s),i(w,$t),i($t,Ca),i(w,_a),i(w,ei),i(ei,Aa),i(w,Ia),i(w,ti),i(ti,Ha),i(w,xa),i(w,ii),i(ii,Pa),l(e,Cs,s),l(e,_,s),i(_,La),i(_,K),i(K,Ta),i(_,Ma),i(_,N),i(N,Ra),i(_,Da),l(e,_s,s),l(e,Xe,s),i(Xe,Ba),l(e,As,s),l(e,A,s),i(A,si),i(si,za),i(A,Oa),i(A,li),i(li,Fa),i(A,ga),i(A,ri),i(ri,Ka),l(e,Is,s),l(e,Ve,s),i(Ve,Na),l(e,Hs,s),l(e,We,s),i(We,Ua),l(e,xs,s),l(e,Ze,s),i(Ze,qa),l(e,Ps,s),l(e,Je,s),i(Je,Ga),l(e,Ls,s),l(e,Qe,s),i(Qe,ja),l(e,Ts,s),l(e,Ye,s),i(Ye,Xa),l(e,Ms,s),l(e,$e,s),i($e,Va),l(e,Rs,s),l(e,et,s),i(et,Wa),l(e,Ds,s),l(e,tt,s),i(tt,Za),l(e,Bs,s),l(e,it,s),i(it,Ja),l(e,zs,s),l(e,st,s),i(st,Qa),l(e,Os,s),l(e,lt,s),i(lt,U),i(U,Ya),l(e,Fs,s),l(e,B,s),i(B,$a),i(B,q),i(q,eo),i(B,to)},p:so,i:so,o:so,d(e){e&&t(P),e&&t(oi),e&&t(G),e&&t(ni),e&&t(j),e&&t(hi),e&&t(X),e&&t(pi),e&&t(V),e&&t(fi),e&&t(c),e&&t(yi),e&&t(W),e&&t(ci),e&&t(Z),e&&t(mi),e&&t(J),e&&t(ui),e&&t(Q),e&&t(di),e&&t(Y),e&&t(vi),e&&t($),e&&t(bi),e&&t(ee),e&&t(wi),e&&t(te),e&&t(Ei),e&&t(ie),e&&t(ki),e&&t(se),e&&t(Si),e&&t(le),e&&t(Ci),e&&t(re),e&&t(_i),e&&t(k),e&&t(Ai),e&&t(ae),e&&t(Ii),e&&t(oe),e&&t(Hi),e&&t(L),e&&t(xi),e&&t(g),e&&t(Pi),e&&t(ne),e&&t(Li),e&&t(he),e&&t(Ti),e&&t(pe),e&&t(Mi),e&&t(fe),e&&t(Ri),e&&t(ye),e&&t(Di),e&&t(ce),e&&t(Bi),e&&t(me),e&&t(zi),e&&t(ue),e&&t(Oi),e&&t(de),e&&t(Fi),e&&t(T),e&&t(gi),e&&t(ve),e&&t(Ki),e&&t(m),e&&t(Ni),e&&t(be),e&&t(Ui),e&&t(C),e&&t(qi),e&&t(we),e&&t(Gi),e&&t(Ee),e&&t(ji),e&&t(ke),e&&t(Xi),e&&t(M),e&&t(Vi),e&&t(Se),e&&t(Wi),e&&t(R),e&&t(Zi),e&&t(Ce),e&&t(Ji),e&&t(_e),e&&t(Qi),e&&t(Ae),e&&t(Yi),e&&t(Ie),e&&t($i),e&&t(b),e&&t(es),e&&t(He),e&&t(ts),e&&t(xe),e&&t(is),e&&t(Pe),e&&t(ss),e&&t(D),e&&t(ls),e&&t(Le),e&&t(rs),e&&t(Te),e&&t(as),e&&t(Me),e&&t(os),e&&t(Re),e&&t(ns),e&&t(De),e&&t(hs),e&&t(Be),e&&t(ps),e&&t(ze),e&&t(fs),e&&t(Oe),e&&t(ys),e&&t(Fe),e&&t(cs),e&&t(y),e&&t(ms),e&&t(ge),e&&t(us),e&&t(Ke),e&&t(ds),e&&t(Ne),e&&t(vs),e&&t(u),e&&t(bs),e&&t(Ue),e&&t(ws),e&&t(qe),e&&t(Es),e&&t(Ge),e&&t(ks),e&&t(je),e&&t(Ss),e&&t(w),e&&t(Cs),e&&t(_),e&&t(_s),e&&t(Xe),e&&t(As),e&&t(A),e&&t(Is),e&&t(Ve),e&&t(Hs),e&&t(We),e&&t(xs),e&&t(Ze),e&&t(Ps),e&&t(Je),e&&t(Ls),e&&t(Qe),e&&t(Ts),e&&t(Ye),e&&t(Ms),e&&t($e),e&&t(Rs),e&&t(et),e&&t(Ds),e&&t(tt),e&&t(Bs),e&&t(it),e&&t(zs),e&&t(st),e&&t(Os),e&&t(lt),e&&t(Fs),e&&t(B)}}}const xh={title:"Cryptic Cryptography Codex",date:"2023-06-23"},{title:Sh,date:Lh}=xh;class Th extends _h{constructor(P){super(),Ah(this,P,null,Hh,Ih,{})}}export{Th as default,xh as metadata};
