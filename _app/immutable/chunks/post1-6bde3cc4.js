import{S as Eo,i as yo,s as _o,k as i,q as l,a as m,l as p,m as r,r as a,h as t,c,n as xo,b as n,B as o,A as zt}from"./index-4cbca6b4.js";function ko(ho){let E,We,ne,h,He,A,Me,qe,N,Ie,Be,ie,O,ze,pe,S,Fe,re,x,wo=`<code class="language-css"><span class="token selector">.grid-container</span> <span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,me,T,Le,ce,f,Re,G,Ae,Ne,j,Ge,je,J,Je,Ke,K,Qe,Ue,fe,W,Ve,ue,k,Q,Xe,Ye,he,v,Ze,U,$e,ge,V,et,de,H,tt,we,b,ot,X,lt,ve,C,Y,at,st,Ee,M,nt,ye,u,it,Z,pt,rt,$,mt,ct,g,ft,ut,_e,q,ht,xe,P,dt,ee,wt,ke,I,vt,be,d,Et,te,yt,_t,oe,xt,kt,Ce,D,bt,le,Ct,Pe,y,Pt,ae,Dt,Ot,De,B,St,Oe,z,Tt,Se,F,Wt;return{c(){E=i("h1"),We=l(uo),ne=m(),h=i("p"),He=l(`There are two main ways to customise the layout of html elements / components:
`),A=i("code"),Me=l("display: grid"),qe=l(" and "),N=i("code"),Ie=l("display: flex"),Be=l("."),ie=m(),O=i("p"),ze=l("This post describes how to achieve a responsive layout that will automatically populate components into a parent component such that the number of columns is dynamic. For example, when viewed on larger screens, there will be 5 columns, but when viewed on narrower screens, it will shrink to one column."),pe=m(),S=i("p"),Fe=l("TL;DR:"),re=m(),x=i("pre"),me=m(),T=i("h2"),Le=l("display: grid"),ce=m(),f=i("p"),Re=l("By setting the "),G=i("em"),Ae=l("parent"),Ne=l(" component\u2019s CSS property to "),j=i("code"),Ge=l("display: grid"),je=l(", we are able to control how the "),J=i("em"),Je=l("child"),Ke=l(" components are arranged. This property itself does not do anything, you will need to specify "),K=i("em"),Qe=l("how"),Ue=l(" the components should be arranged."),fe=m(),W=i("h2"),Ve=l("grid-template-columns"),ue=m(),k=i("p"),Q=i("code"),Xe=l("grid-template-columns"),Ye=l(" is one of the CSS property that helps you specify how child components are arranged. The simplest way is to give values corresponding to the size of each column."),he=m(),v=i("p"),Ze=l("For example: "),U=i("code"),$e=l("grid-template-columns: 1fr 1fr 1fr"),ge=l(` will arrange the child components into 3 columns taking equal widths, and if there are more than 3 child components it will flow to the next row.
`),V=i("em"),et=l("Notice that the number of values you pass in will determine the number of columns in the grid"),de=m(),H=i("h2"),tt=l("repeat()"),we=m(),b=i("p"),ot=l("Instead of statically passing in the number of values, there is another equivalent syntax using the repeat() function: "),X=i("code"),lt=l("grid-template-columns: repeat(3, 1fr)"),ve=m(),C=i("p"),Y=i("code"),at=l("repeat()"),st=l(" takes in 2 parameters, the number of times to repeat and the size to repeat."),Ee=m(),M=i("h3"),nt=l("repeat(): special #1"),ye=m(),u=i("p"),it=l("Instead of having number of times as the first parameter, "),Z=i("code"),pt=l("repeat()"),rt=l(" can also take in either of these two keywords: "),$=i("code"),mt=l("autofit"),ct=l(" and "),g=i("code"),ft=l("autofill"),ut=l(", as its first parameter."),_e=m(),q=i("p"),ht=l("Both keywords work similarly in that they will populate the maximum number of columns until no more child components can fit, then move on to the next row."),xe=m(),P=i("p"),dt=l("Example: "),ee=i("code"),wt=l("grid-template-columns: repeat(autofill, 200px)"),ke=m(),I=i("h3"),vt=l("repeat(): special #2"),be=m(),d=i("p"),Et=l("Above example will populate a "),te=i("em"),yt=l("fixed width"),_t=l(" child component. In order to make the child components response, repeat()\u2018s second parameter accepts a "),oe=i("code"),xt=l("minmax()"),kt=l(" function."),Ce=m(),D=i("p"),bt=l("Example: "),le=i("code"),Ct=l("grid-template-columns: repeat(autofill, minmax(200px, 1fr))"),Pe=m(),y=i("p"),Pt=l("We can specify that the child components has a "),ae=i("em"),Dt=l("minimum width"),Ot=l(" of 200px."),De=m(),B=i("p"),St=l("When narrowing the view, the child component gets smaller than 200px, the grid will reduce the number of columns."),Oe=m(),z=i("p"),Tt=l("When widening the view, the child components will widen until another 200px column can fit, at which point another column will be added."),Se=m(),F=i("p"),Wt=l("We now have a grid layout with responsive number of columns."),this.h()},l(e){E=p(e,"H1",{});var s=r(E);We=a(s,uo),s.forEach(t),ne=c(e),h=p(e,"P",{});var L=r(h);He=a(L,`There are two main ways to customise the layout of html elements / components:
`),A=p(L,"CODE",{});var Ft=r(A);Me=a(Ft,"display: grid"),Ft.forEach(t),qe=a(L," and "),N=p(L,"CODE",{});var Lt=r(N);Ie=a(Lt,"display: flex"),Lt.forEach(t),Be=a(L,"."),L.forEach(t),ie=c(e),O=p(e,"P",{});var Rt=r(O);ze=a(Rt,"This post describes how to achieve a responsive layout that will automatically populate components into a parent component such that the number of columns is dynamic. For example, when viewed on larger screens, there will be 5 columns, but when viewed on narrower screens, it will shrink to one column."),Rt.forEach(t),pe=c(e),S=p(e,"P",{});var At=r(S);Fe=a(At,"TL;DR:"),At.forEach(t),re=c(e),x=p(e,"PRE",{class:!0});var vo=r(x);vo.forEach(t),me=c(e),T=p(e,"H2",{});var Nt=r(T);Le=a(Nt,"display: grid"),Nt.forEach(t),ce=c(e),f=p(e,"P",{});var w=r(f);Re=a(w,"By setting the "),G=p(w,"EM",{});var Gt=r(G);Ae=a(Gt,"parent"),Gt.forEach(t),Ne=a(w," component\u2019s CSS property to "),j=p(w,"CODE",{});var jt=r(j);Ge=a(jt,"display: grid"),jt.forEach(t),je=a(w,", we are able to control how the "),J=p(w,"EM",{});var Jt=r(J);Je=a(Jt,"child"),Jt.forEach(t),Ke=a(w," components are arranged. This property itself does not do anything, you will need to specify "),K=p(w,"EM",{});var Kt=r(K);Qe=a(Kt,"how"),Kt.forEach(t),Ue=a(w," the components should be arranged."),w.forEach(t),fe=c(e),W=p(e,"H2",{});var Qt=r(W);Ve=a(Qt,"grid-template-columns"),Qt.forEach(t),ue=c(e),k=p(e,"P",{});var Ht=r(k);Q=p(Ht,"CODE",{});var Ut=r(Q);Xe=a(Ut,"grid-template-columns"),Ut.forEach(t),Ye=a(Ht," is one of the CSS property that helps you specify how child components are arranged. The simplest way is to give values corresponding to the size of each column."),Ht.forEach(t),he=c(e),v=p(e,"P",{});var se=r(v);Ze=a(se,"For example: "),U=p(se,"CODE",{});var Vt=r(U);$e=a(Vt,"grid-template-columns: 1fr 1fr 1fr"),Vt.forEach(t),ge=a(se,` will arrange the child components into 3 columns taking equal widths, and if there are more than 3 child components it will flow to the next row.
`),V=p(se,"EM",{});var Xt=r(V);et=a(Xt,"Notice that the number of values you pass in will determine the number of columns in the grid"),Xt.forEach(t),se.forEach(t),de=c(e),H=p(e,"H2",{});var Yt=r(H);tt=a(Yt,"repeat()"),Yt.forEach(t),we=c(e),b=p(e,"P",{});var Mt=r(b);ot=a(Mt,"Instead of statically passing in the number of values, there is another equivalent syntax using the repeat() function: "),X=p(Mt,"CODE",{});var Zt=r(X);lt=a(Zt,"grid-template-columns: repeat(3, 1fr)"),Zt.forEach(t),Mt.forEach(t),ve=c(e),C=p(e,"P",{});var qt=r(C);Y=p(qt,"CODE",{});var $t=r(Y);at=a($t,"repeat()"),$t.forEach(t),st=a(qt," takes in 2 parameters, the number of times to repeat and the size to repeat."),qt.forEach(t),Ee=c(e),M=p(e,"H3",{});var gt=r(M);nt=a(gt,"repeat(): special #1"),gt.forEach(t),ye=c(e),u=p(e,"P",{});var _=r(u);it=a(_,"Instead of having number of times as the first parameter, "),Z=p(_,"CODE",{});var eo=r(Z);pt=a(eo,"repeat()"),eo.forEach(t),rt=a(_," can also take in either of these two keywords: "),$=p(_,"CODE",{});var to=r($);mt=a(to,"autofit"),to.forEach(t),ct=a(_," and "),g=p(_,"CODE",{});var oo=r(g);ft=a(oo,"autofill"),oo.forEach(t),ut=a(_,", as its first parameter."),_.forEach(t),_e=c(e),q=p(e,"P",{});var lo=r(q);ht=a(lo,"Both keywords work similarly in that they will populate the maximum number of columns until no more child components can fit, then move on to the next row."),lo.forEach(t),xe=c(e),P=p(e,"P",{});var It=r(P);dt=a(It,"Example: "),ee=p(It,"CODE",{});var ao=r(ee);wt=a(ao,"grid-template-columns: repeat(autofill, 200px)"),ao.forEach(t),It.forEach(t),ke=c(e),I=p(e,"H3",{});var so=r(I);vt=a(so,"repeat(): special #2"),so.forEach(t),be=c(e),d=p(e,"P",{});var R=r(d);Et=a(R,"Above example will populate a "),te=p(R,"EM",{});var no=r(te);yt=a(no,"fixed width"),no.forEach(t),_t=a(R," child component. In order to make the child components response, repeat()\u2018s second parameter accepts a "),oe=p(R,"CODE",{});var io=r(oe);xt=a(io,"minmax()"),io.forEach(t),kt=a(R," function."),R.forEach(t),Ce=c(e),D=p(e,"P",{});var Bt=r(D);bt=a(Bt,"Example: "),le=p(Bt,"CODE",{});var po=r(le);Ct=a(po,"grid-template-columns: repeat(autofill, minmax(200px, 1fr))"),po.forEach(t),Bt.forEach(t),Pe=c(e),y=p(e,"P",{});var Te=r(y);Pt=a(Te,"We can specify that the child components has a "),ae=p(Te,"EM",{});var ro=r(ae);Dt=a(ro,"minimum width"),ro.forEach(t),Ot=a(Te," of 200px."),Te.forEach(t),De=c(e),B=p(e,"P",{});var mo=r(B);St=a(mo,"When narrowing the view, the child component gets smaller than 200px, the grid will reduce the number of columns."),mo.forEach(t),Oe=c(e),z=p(e,"P",{});var co=r(z);Tt=a(co,"When widening the view, the child components will widen until another 200px column can fit, at which point another column will be added."),co.forEach(t),Se=c(e),F=p(e,"P",{});var fo=r(F);Wt=a(fo,"We now have a grid layout with responsive number of columns."),fo.forEach(t),this.h()},h(){xo(x,"class","language-css")},m(e,s){n(e,E,s),o(E,We),n(e,ne,s),n(e,h,s),o(h,He),o(h,A),o(A,Me),o(h,qe),o(h,N),o(N,Ie),o(h,Be),n(e,ie,s),n(e,O,s),o(O,ze),n(e,pe,s),n(e,S,s),o(S,Fe),n(e,re,s),n(e,x,s),x.innerHTML=wo,n(e,me,s),n(e,T,s),o(T,Le),n(e,ce,s),n(e,f,s),o(f,Re),o(f,G),o(G,Ae),o(f,Ne),o(f,j),o(j,Ge),o(f,je),o(f,J),o(J,Je),o(f,Ke),o(f,K),o(K,Qe),o(f,Ue),n(e,fe,s),n(e,W,s),o(W,Ve),n(e,ue,s),n(e,k,s),o(k,Q),o(Q,Xe),o(k,Ye),n(e,he,s),n(e,v,s),o(v,Ze),o(v,U),o(U,$e),o(v,ge),o(v,V),o(V,et),n(e,de,s),n(e,H,s),o(H,tt),n(e,we,s),n(e,b,s),o(b,ot),o(b,X),o(X,lt),n(e,ve,s),n(e,C,s),o(C,Y),o(Y,at),o(C,st),n(e,Ee,s),n(e,M,s),o(M,nt),n(e,ye,s),n(e,u,s),o(u,it),o(u,Z),o(Z,pt),o(u,rt),o(u,$),o($,mt),o(u,ct),o(u,g),o(g,ft),o(u,ut),n(e,_e,s),n(e,q,s),o(q,ht),n(e,xe,s),n(e,P,s),o(P,dt),o(P,ee),o(ee,wt),n(e,ke,s),n(e,I,s),o(I,vt),n(e,be,s),n(e,d,s),o(d,Et),o(d,te),o(te,yt),o(d,_t),o(d,oe),o(oe,xt),o(d,kt),n(e,Ce,s),n(e,D,s),o(D,bt),o(D,le),o(le,Ct),n(e,Pe,s),n(e,y,s),o(y,Pt),o(y,ae),o(ae,Dt),o(y,Ot),n(e,De,s),n(e,B,s),o(B,St),n(e,Oe,s),n(e,z,s),o(z,Tt),n(e,Se,s),n(e,F,s),o(F,Wt)},p:zt,i:zt,o:zt,d(e){e&&t(E),e&&t(ne),e&&t(h),e&&t(ie),e&&t(O),e&&t(pe),e&&t(S),e&&t(re),e&&t(x),e&&t(me),e&&t(T),e&&t(ce),e&&t(f),e&&t(fe),e&&t(W),e&&t(ue),e&&t(k),e&&t(he),e&&t(v),e&&t(de),e&&t(H),e&&t(we),e&&t(b),e&&t(ve),e&&t(C),e&&t(Ee),e&&t(M),e&&t(ye),e&&t(u),e&&t(_e),e&&t(q),e&&t(xe),e&&t(P),e&&t(ke),e&&t(I),e&&t(be),e&&t(d),e&&t(Ce),e&&t(D),e&&t(Pe),e&&t(y),e&&t(De),e&&t(B),e&&t(Oe),e&&t(z),e&&t(Se),e&&t(F)}}}const bo={title:"CSS Responsive Grid Layout",date:"2022-09-14"},{title:uo,date:Po}=bo;class Do extends Eo{constructor(E){super(),yo(this,E,null,ko,_o,{})}}export{Do as default,bo as metadata};
