import{S as ws,i as Es,s as _s,k as o,q as s,a as i,l,m as p,r as n,h as a,c as u,n as f,b as c,B as t,A as Et}from"./index-4cbca6b4.js";function As(ds){let A,ea,Be,z,aa,De,C,ta,Ie,L,sa,Pe,V,na,Fe,T,oa,ee,la,pa,Ue,b,ra,ae,ca,ia,te,ua,fa,Me,y,da,se,ma,ya,ne,ha,ka,oe,ba,va,Se,x,wa,le,Ea,_a,We,v,Aa,pe,Ta,xa,re,Ba,Da,Oe,J,Ia,je,N,Pa,He,B,Fa,ce,Ua,Ma,Re,P,ms=`<code class="language-js"><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create new array buffer of length 16 BYTES</span>
<span class="token comment">// create a view of the buffer, where every 4 bytes represent one uint32</span>
<span class="token keyword">let</span> uint32arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// typedarray can be indexed</span>
uint32arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">322</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uint32arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [322, 0, 0, 0]</span>
<span class="token comment">// note the rest of the values are 0</span>
<span class="token comment">// note that there are only 4 items because len_of_buffer / len_of_uint32 = 4</span>

<span class="token comment">// you can reference the underlying arraybuffer</span>
uint32arr<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>

<span class="token comment">// note that assigning number larger than what the type can hold will overflow</span>
<span class="token keyword">let</span> uint8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this will automatically create an underlying buffer</span>
uint8arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
uint8arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
uint8arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">257</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uint8arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [255, 0, 1]</span></code>`,ze,m,Sa,ie,Wa,Oa,ue,ja,Ha,fe,Ra,za,de,Ca,La,Ce,g,Va,Le,h,Ja,me,Na,ga,ye,Ga,qa,he,Ya,Ka,Ve,F,ys=`<code class="language-js"><span class="token keyword">let</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
dv<span class="token punctuation">.</span><span class="token function">setInt8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// at 0 byte offset from start of view, set value to 20</span>
dv<span class="token punctuation">.</span><span class="token function">setFloat32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// at 1 byte offset from start of view, set value to Math.PI</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getInt8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 // at 0 byte offset, read as Int8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getFloat32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.141... // at 1 byte offset, read the next 4 bytes as Float32</span></code>`,Je,G,Qa,Ne,q,Xa,ge,w,Za,ke,$a,et,U,at,tt,Ge,E,st,be,nt,ot,ve,lt,pt,qe,M,hs=`<code class="language-js"><span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
encoded_utf8 <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encoded_utf8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uint8Array[72, 101, 108, 108, 111]</span>

<span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decoded_text <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encoded_utf8<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decoded_text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span></code>`,Ye,Y,rt,Ke,K,ct,Qe,d,we,S,it,ut,Ee,W,ft,dt,_e,O,mt,yt,Ae,j,ht,kt,Te,H,bt,vt,xe,R,wt;return{c(){A=o("h1"),ea=s(fs),Be=i(),z=o("p"),aa=s("When working with binary data in Javascript, there\u2019s a lot of classes that can be potentially used, and they all seem to do the same thing: deal with binary data."),De=i(),C=o("p"),ta=s("What are the nuances and differences between all the different types, and when should we use which class?"),Ie=i(),L=o("h2"),sa=s("ArrayBuffer"),Pe=i(),V=o("p"),na=s("The most basic type is the ArrayBuffer."),Fe=i(),T=o("p"),oa=s("What is an ArrayBuffer? It is a "),ee=o("em"),la=s("reference"),pa=s(" to a fixed-length, contiguous (array of) memory area."),Ue=i(),b=o("p"),ra=s("An ArrayBuffer can be created with "),ae=o("code"),ca=s("new ArrayBuffer(8)"),ia=s(`, where the input is the number of bytes (length of the memory area) that it references.
When it is created, a contiguous segment of memory will be `),te=o("em"),ua=s("allocated"),fa=s(", based on the length that was supplied in the input, and it is pre-filled with zeroes."),Me=i(),y=o("p"),da=s("Note: the word "),se=o("em"),ma=s("array"),ya=s(" used above is not related to the normal Javascript "),ne=o("code"),ha=s("Array"),ka=s(", but rather indicates a "),oe=o("em"),ba=s("memory array"),va=s(" as in the context of lower level programming concept."),Se=i(),x=o("p"),wa=s("Note: "),le=o("em"),Ea=s("allocation"),_a=s(" of memory means to reserve (that segment of) memory in that is available in the computer\u2019s RAM."),We=i(),v=o("p"),Aa=s("ArrayBuffers are just references to a memory location, and it is "),pe=o("strong"),Ta=s("not possible to manipulate the bytes directly using ArrayBuffer"),xa=s(" (although it is possible to "),re=o("em"),Ba=s("resize"),Da=s(` the buffer).
Furthermore, the bytes in this memory location by itself is meaningless, just a bunch of 1s and 0s.`),Oe=i(),J=o("p"),Ia=s("In order to manipulate the bytes and give them meaning, we must do it through a view (using TypedArrays or DataViews)"),je=i(),N=o("h2"),Pa=s("TypedArray"),He=i(),B=o("p"),Fa=s(`TypedArrays are an umbrella term for a bunch of different classes such as Uint8Array, Float64Array, etc.
They are \u2018views\u2019 into the array buffer and give `),ce=o("em"),Ua=s("meaning"),Ma=s(` to the bytes that exists in the ArrayBuffers.
For instance, a Uint8Array will imply that every 8 bits (or 1 byte) is an integer. And this same relationship applies for other TypedArray, i.e. Uint16Array means an integer every 16 bits (2 bytes), Float64Array means a decimal point number every 64 bits (8 bytes), etc.`),Re=i(),P=o("pre"),ze=i(),m=o("p"),Sa=s("TypedArray has most of the regular Array methods like "),ie=o("code"),Wa=s("map"),Oa=s(", "),ue=o("code"),ja=s("slice"),Ha=s(", "),fe=o("code"),Ra=s("find"),za=s(", "),de=o("code"),Ca=s("reduce"),La=s(" etc."),Ce=i(),g=o("h2"),Va=s("DataView"),Le=i(),h=o("p"),Ja=s("DataViews are flexible alternatives to TypedArrays as they don\u2019t declare "),me=o("em"),Na=s("upfront"),ga=s(" what type, but rather the type is specified during usage of the view using its "),ye=o("code"),Ga=s(".get"),qa=s(" and "),he=o("code"),Ya=s(".set"),Ka=s(" typed methods."),Ve=i(),F=o("pre"),Je=i(),G=o("p"),Qa=s("From the above example, you can see DataView can be useful when the buffer contains multiple types."),Ne=i(),q=o("h2"),Xa=s("TextDecoder and TextEncoder"),ge=i(),w=o("p"),Za=s("If the binary data is a string instead of numbers, you can use "),ke=o("code"),$a=s("TextDecoder"),et=s(` to decode the binary.
It supports many encodings `),U=o("a"),at=s("link"),tt=s(", but the default is UTF-8."),Ge=i(),E=o("p"),st=s("A "),be=o("code"),nt=s("TextEncoder"),ot=s(" encodes a JavaScript string into a Uint8Array UTF-8 encoded text. It "),ve=o("em"),lt=s("only supports UTF-8 encoding"),pt=s("."),qe=i(),M=o("pre"),Ye=i(),Y=o("h2"),rt=s("Blob"),Ke=i(),K=o("h1"),ct=s("References / Further Reading"),Qe=i(),d=o("ul"),we=o("li"),S=o("a"),it=s("File"),ut=i(),Ee=o("li"),W=o("a"),ft=s("Blob"),dt=i(),_e=o("li"),O=o("a"),mt=s("ArrayBuffer"),yt=i(),Ae=o("li"),j=o("a"),ht=s("TypedArray"),kt=i(),Te=o("li"),H=o("a"),bt=s("TextDecoder"),vt=i(),xe=o("li"),R=o("a"),wt=s("TextEncoder"),this.h()},l(e){A=l(e,"H1",{});var r=p(A);ea=n(r,fs),r.forEach(a),Be=u(e),z=l(e,"P",{});var _t=p(z);aa=n(_t,"When working with binary data in Javascript, there\u2019s a lot of classes that can be potentially used, and they all seem to do the same thing: deal with binary data."),_t.forEach(a),De=u(e),C=l(e,"P",{});var At=p(C);ta=n(At,"What are the nuances and differences between all the different types, and when should we use which class?"),At.forEach(a),Ie=u(e),L=l(e,"H2",{});var Tt=p(L);sa=n(Tt,"ArrayBuffer"),Tt.forEach(a),Pe=u(e),V=l(e,"P",{});var xt=p(V);na=n(xt,"The most basic type is the ArrayBuffer."),xt.forEach(a),Fe=u(e),T=l(e,"P",{});var Xe=p(T);oa=n(Xe,"What is an ArrayBuffer? It is a "),ee=l(Xe,"EM",{});var Bt=p(ee);la=n(Bt,"reference"),Bt.forEach(a),pa=n(Xe," to a fixed-length, contiguous (array of) memory area."),Xe.forEach(a),Ue=u(e),b=l(e,"P",{});var Q=p(b);ra=n(Q,"An ArrayBuffer can be created with "),ae=l(Q,"CODE",{});var Dt=p(ae);ca=n(Dt,"new ArrayBuffer(8)"),Dt.forEach(a),ia=n(Q,`, where the input is the number of bytes (length of the memory area) that it references.
When it is created, a contiguous segment of memory will be `),te=l(Q,"EM",{});var It=p(te);ua=n(It,"allocated"),It.forEach(a),fa=n(Q,", based on the length that was supplied in the input, and it is pre-filled with zeroes."),Q.forEach(a),Me=u(e),y=l(e,"P",{});var D=p(y);da=n(D,"Note: the word "),se=l(D,"EM",{});var Pt=p(se);ma=n(Pt,"array"),Pt.forEach(a),ya=n(D," used above is not related to the normal Javascript "),ne=l(D,"CODE",{});var Ft=p(ne);ha=n(Ft,"Array"),Ft.forEach(a),ka=n(D,", but rather indicates a "),oe=l(D,"EM",{});var Ut=p(oe);ba=n(Ut,"memory array"),Ut.forEach(a),va=n(D," as in the context of lower level programming concept."),D.forEach(a),Se=u(e),x=l(e,"P",{});var Ze=p(x);wa=n(Ze,"Note: "),le=l(Ze,"EM",{});var Mt=p(le);Ea=n(Mt,"allocation"),Mt.forEach(a),_a=n(Ze," of memory means to reserve (that segment of) memory in that is available in the computer\u2019s RAM."),Ze.forEach(a),We=u(e),v=l(e,"P",{});var X=p(v);Aa=n(X,"ArrayBuffers are just references to a memory location, and it is "),pe=l(X,"STRONG",{});var St=p(pe);Ta=n(St,"not possible to manipulate the bytes directly using ArrayBuffer"),St.forEach(a),xa=n(X," (although it is possible to "),re=l(X,"EM",{});var Wt=p(re);Ba=n(Wt,"resize"),Wt.forEach(a),Da=n(X,` the buffer).
Furthermore, the bytes in this memory location by itself is meaningless, just a bunch of 1s and 0s.`),X.forEach(a),Oe=u(e),J=l(e,"P",{});var Ot=p(J);Ia=n(Ot,"In order to manipulate the bytes and give them meaning, we must do it through a view (using TypedArrays or DataViews)"),Ot.forEach(a),je=u(e),N=l(e,"H2",{});var jt=p(N);Pa=n(jt,"TypedArray"),jt.forEach(a),He=u(e),B=l(e,"P",{});var $e=p(B);Fa=n($e,`TypedArrays are an umbrella term for a bunch of different classes such as Uint8Array, Float64Array, etc.
They are \u2018views\u2019 into the array buffer and give `),ce=l($e,"EM",{});var Ht=p(ce);Ua=n(Ht,"meaning"),Ht.forEach(a),Ma=n($e,` to the bytes that exists in the ArrayBuffers.
For instance, a Uint8Array will imply that every 8 bits (or 1 byte) is an integer. And this same relationship applies for other TypedArray, i.e. Uint16Array means an integer every 16 bits (2 bytes), Float64Array means a decimal point number every 64 bits (8 bytes), etc.`),$e.forEach(a),Re=u(e),P=l(e,"PRE",{class:!0});var ks=p(P);ks.forEach(a),ze=u(e),m=l(e,"P",{});var _=p(m);Sa=n(_,"TypedArray has most of the regular Array methods like "),ie=l(_,"CODE",{});var Rt=p(ie);Wa=n(Rt,"map"),Rt.forEach(a),Oa=n(_,", "),ue=l(_,"CODE",{});var zt=p(ue);ja=n(zt,"slice"),zt.forEach(a),Ha=n(_,", "),fe=l(_,"CODE",{});var Ct=p(fe);Ra=n(Ct,"find"),Ct.forEach(a),za=n(_,", "),de=l(_,"CODE",{});var Lt=p(de);Ca=n(Lt,"reduce"),Lt.forEach(a),La=n(_," etc."),_.forEach(a),Ce=u(e),g=l(e,"H2",{});var Vt=p(g);Va=n(Vt,"DataView"),Vt.forEach(a),Le=u(e),h=l(e,"P",{});var I=p(h);Ja=n(I,"DataViews are flexible alternatives to TypedArrays as they don\u2019t declare "),me=l(I,"EM",{});var Jt=p(me);Na=n(Jt,"upfront"),Jt.forEach(a),ga=n(I," what type, but rather the type is specified during usage of the view using its "),ye=l(I,"CODE",{});var Nt=p(ye);Ga=n(Nt,".get"),Nt.forEach(a),qa=n(I," and "),he=l(I,"CODE",{});var gt=p(he);Ya=n(gt,".set"),gt.forEach(a),Ka=n(I," typed methods."),I.forEach(a),Ve=u(e),F=l(e,"PRE",{class:!0});var bs=p(F);bs.forEach(a),Je=u(e),G=l(e,"P",{});var Gt=p(G);Qa=n(Gt,"From the above example, you can see DataView can be useful when the buffer contains multiple types."),Gt.forEach(a),Ne=u(e),q=l(e,"H2",{});var qt=p(q);Xa=n(qt,"TextDecoder and TextEncoder"),qt.forEach(a),ge=u(e),w=l(e,"P",{});var Z=p(w);Za=n(Z,"If the binary data is a string instead of numbers, you can use "),ke=l(Z,"CODE",{});var Yt=p(ke);$a=n(Yt,"TextDecoder"),Yt.forEach(a),et=n(Z,` to decode the binary.
It supports many encodings `),U=l(Z,"A",{href:!0,rel:!0});var Kt=p(U);at=n(Kt,"link"),Kt.forEach(a),tt=n(Z,", but the default is UTF-8."),Z.forEach(a),Ge=u(e),E=l(e,"P",{});var $=p(E);st=n($,"A "),be=l($,"CODE",{});var Qt=p(be);nt=n(Qt,"TextEncoder"),Qt.forEach(a),ot=n($," encodes a JavaScript string into a Uint8Array UTF-8 encoded text. It "),ve=l($,"EM",{});var Xt=p(ve);lt=n(Xt,"only supports UTF-8 encoding"),Xt.forEach(a),pt=n($,"."),$.forEach(a),qe=u(e),M=l(e,"PRE",{class:!0});var vs=p(M);vs.forEach(a),Ye=u(e),Y=l(e,"H2",{});var Zt=p(Y);rt=n(Zt,"Blob"),Zt.forEach(a),Ke=u(e),K=l(e,"H1",{});var $t=p(K);ct=n($t,"References / Further Reading"),$t.forEach(a),Qe=u(e),d=l(e,"UL",{});var k=p(d);we=l(k,"LI",{});var es=p(we);S=l(es,"A",{href:!0,rel:!0});var as=p(S);it=n(as,"File"),as.forEach(a),es.forEach(a),ut=u(k),Ee=l(k,"LI",{});var ts=p(Ee);W=l(ts,"A",{href:!0,rel:!0});var ss=p(W);ft=n(ss,"Blob"),ss.forEach(a),ts.forEach(a),dt=u(k),_e=l(k,"LI",{});var ns=p(_e);O=l(ns,"A",{href:!0,rel:!0});var os=p(O);mt=n(os,"ArrayBuffer"),os.forEach(a),ns.forEach(a),yt=u(k),Ae=l(k,"LI",{});var ls=p(Ae);j=l(ls,"A",{href:!0,rel:!0});var ps=p(j);ht=n(ps,"TypedArray"),ps.forEach(a),ls.forEach(a),kt=u(k),Te=l(k,"LI",{});var rs=p(Te);H=l(rs,"A",{href:!0,rel:!0});var cs=p(H);bt=n(cs,"TextDecoder"),cs.forEach(a),rs.forEach(a),vt=u(k),xe=l(k,"LI",{});var is=p(xe);R=l(is,"A",{href:!0,rel:!0});var us=p(R);wt=n(us,"TextEncoder"),us.forEach(a),is.forEach(a),k.forEach(a),this.h()},h(){f(P,"class","language-js"),f(F,"class","language-js"),f(U,"href","https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings"),f(U,"rel","nofollow"),f(M,"class","language-js"),f(S,"href","https://developer.mozilla.org/en-US/docs/Web/API/File"),f(S,"rel","nofollow"),f(W,"href","https://developer.mozilla.org/en-US/docs/Web/API/Blob"),f(W,"rel","nofollow"),f(O,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"),f(O,"rel","nofollow"),f(j,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"),f(j,"rel","nofollow"),f(H,"href","https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"),f(H,"rel","nofollow"),f(R,"href","https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"),f(R,"rel","nofollow")},m(e,r){c(e,A,r),t(A,ea),c(e,Be,r),c(e,z,r),t(z,aa),c(e,De,r),c(e,C,r),t(C,ta),c(e,Ie,r),c(e,L,r),t(L,sa),c(e,Pe,r),c(e,V,r),t(V,na),c(e,Fe,r),c(e,T,r),t(T,oa),t(T,ee),t(ee,la),t(T,pa),c(e,Ue,r),c(e,b,r),t(b,ra),t(b,ae),t(ae,ca),t(b,ia),t(b,te),t(te,ua),t(b,fa),c(e,Me,r),c(e,y,r),t(y,da),t(y,se),t(se,ma),t(y,ya),t(y,ne),t(ne,ha),t(y,ka),t(y,oe),t(oe,ba),t(y,va),c(e,Se,r),c(e,x,r),t(x,wa),t(x,le),t(le,Ea),t(x,_a),c(e,We,r),c(e,v,r),t(v,Aa),t(v,pe),t(pe,Ta),t(v,xa),t(v,re),t(re,Ba),t(v,Da),c(e,Oe,r),c(e,J,r),t(J,Ia),c(e,je,r),c(e,N,r),t(N,Pa),c(e,He,r),c(e,B,r),t(B,Fa),t(B,ce),t(ce,Ua),t(B,Ma),c(e,Re,r),c(e,P,r),P.innerHTML=ms,c(e,ze,r),c(e,m,r),t(m,Sa),t(m,ie),t(ie,Wa),t(m,Oa),t(m,ue),t(ue,ja),t(m,Ha),t(m,fe),t(fe,Ra),t(m,za),t(m,de),t(de,Ca),t(m,La),c(e,Ce,r),c(e,g,r),t(g,Va),c(e,Le,r),c(e,h,r),t(h,Ja),t(h,me),t(me,Na),t(h,ga),t(h,ye),t(ye,Ga),t(h,qa),t(h,he),t(he,Ya),t(h,Ka),c(e,Ve,r),c(e,F,r),F.innerHTML=ys,c(e,Je,r),c(e,G,r),t(G,Qa),c(e,Ne,r),c(e,q,r),t(q,Xa),c(e,ge,r),c(e,w,r),t(w,Za),t(w,ke),t(ke,$a),t(w,et),t(w,U),t(U,at),t(w,tt),c(e,Ge,r),c(e,E,r),t(E,st),t(E,be),t(be,nt),t(E,ot),t(E,ve),t(ve,lt),t(E,pt),c(e,qe,r),c(e,M,r),M.innerHTML=hs,c(e,Ye,r),c(e,Y,r),t(Y,rt),c(e,Ke,r),c(e,K,r),t(K,ct),c(e,Qe,r),c(e,d,r),t(d,we),t(we,S),t(S,it),t(d,ut),t(d,Ee),t(Ee,W),t(W,ft),t(d,dt),t(d,_e),t(_e,O),t(O,mt),t(d,yt),t(d,Ae),t(Ae,j),t(j,ht),t(d,kt),t(d,Te),t(Te,H),t(H,bt),t(d,vt),t(d,xe),t(xe,R),t(R,wt)},p:Et,i:Et,o:Et,d(e){e&&a(A),e&&a(Be),e&&a(z),e&&a(De),e&&a(C),e&&a(Ie),e&&a(L),e&&a(Pe),e&&a(V),e&&a(Fe),e&&a(T),e&&a(Ue),e&&a(b),e&&a(Me),e&&a(y),e&&a(Se),e&&a(x),e&&a(We),e&&a(v),e&&a(Oe),e&&a(J),e&&a(je),e&&a(N),e&&a(He),e&&a(B),e&&a(Re),e&&a(P),e&&a(ze),e&&a(m),e&&a(Ce),e&&a(g),e&&a(Le),e&&a(h),e&&a(Ve),e&&a(F),e&&a(Je),e&&a(G),e&&a(Ne),e&&a(q),e&&a(ge),e&&a(w),e&&a(Ge),e&&a(E),e&&a(qe),e&&a(M),e&&a(Ye),e&&a(Y),e&&a(Ke),e&&a(K),e&&a(Qe),e&&a(d)}}}const Ts={title:"Javascript ArrayBuffer, TypedArray, DataView, TextDecoder, Blob, File",date:"2023-05-09"},{title:fs,date:Bs}=Ts;class Ds extends ws{constructor(A){super(),Es(this,A,null,As,_s,{})}}export{Ds as default,Ts as metadata};
