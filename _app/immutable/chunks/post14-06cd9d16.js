import{S as bt,i as mt,s as Et,k as l,q as r,a as u,l as o,m as i,r as p,h as t,c as d,n as Ye,b as n,B as s,A as je}from"./index-4cbca6b4.js";function vt(ct){let c,ue,J,k,de,y,fe,he,M,v,ce,F,f,A,ke,ye,N,be,me,C,Ee,K,x,ve,Q,b,G,xe,_e,V,h,z,Te,we,U,De,Re,X,m,q,Pe,Ie,Z,_,W,Oe,$,T,Y,He,g,w,Le,ee,D,Be,te,R,Se,ae,P,Ae,se,I,Ne,ne,O,Ce,le,H,Ge,oe,E,kt=`<code class="language-css"><span class="token selector">.grid-container</span> <span class="token punctuation">&#123;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ie,L,ze,re,B,Ue;return{c(){c=l("h1"),ue=r(ht),J=u(),k=l("p"),de=r("Recently read an extremely informative e-book on database indexing over at "),y=l("a"),fe=r("use-the-index-luke"),he=r(`.
This post is to synthesise and summarise the main learnings that I took away from the ~200 page e-book.`),M=u(),v=l("h1"),ce=r("The Three Powers of Indexing"),F=u(),f=l("ol"),A=l("li"),ke=r("B-Tree Traversal"),ye=u(),N=l("li"),be=r("Data Clustering"),me=u(),C=l("li"),Ee=r("Pipelined Sorting"),K=u(),x=l("h2"),ve=r("Data Structures Underlying the Index"),Q=u(),b=l("p"),G=l("strong"),xe=r("Redundant/Duplicated Data"),_e=r(`
An index is (usually) a separate data structure maintained by the database.
In other words, it is redundant data that is stored/managed on top of the actual data that is stored/managed in your table.
An index is powered by two key data structures: Doubly Linked List and B-Tree.
One node corresponds to one database block.`),V=u(),h=l("p"),z=l("strong"),Te=r("Database block / Database page"),we=r(`
A database block or page is the smallest (size) unit of operation, usually about 4 kilobytes in size.
The data in one block is physically arranged in a `),U=l("em"),De=r("contiguous"),Re=r(` block of memory.
One block can usually store multiple rows of the table data, or multiple index entries.
This means that in order to read a single row within a block that contains multiple rows, the database will have to read the entire block.`),X=u(),m=l("p"),q=l("strong"),Pe=r("Doubly Linked List"),Ie=r(`
The doubly linked lists\u2019 nodes are actually the leaf nodes for the B-tree.
Each node has multiple index entries, sorted by the index key.
Each entry in the node will store the index key(s) and also a pointer (ROWID) to the corresponding (physical) location of the data row.
Each node is also connected to the next higher entry node and next lower entry node, giving it the ability to move up and down the index keys (double linked list).
This effectively makes the index entries and the index nodes all sorted.`),Z=u(),_=l("p"),W=l("strong"),Oe=r("B-tree"),$=u(),T=l("p"),Y=l("strong"),He=r("Pipelining"),g=u(),w=l("h2"),Le=r("WHERE clause"),ee=u(),D=l("h2"),Be=r("JOIN operations"),te=u(),R=l("h2"),Se=r("ORDER BY and GROUP BY"),ae=u(),P=l("h2"),Ae=r("Data Clustering"),se=u(),I=l("h2"),Ne=r("Partial Results"),ne=u(),O=l("h2"),Ce=r("INSERT, DELETE, UPDATE"),le=u(),H=l("p"),Ge=r("Code:"),oe=u(),E=l("pre"),ie=u(),L=l("h2"),ze=r("Heading 2"),re=u(),B=l("p"),Ue=r("The quick brown fox jumps over the lazy dog."),this.h()},l(e){c=o(e,"H1",{});var a=i(c);ue=p(a,ht),a.forEach(t),J=d(e),k=o(e,"P",{});var pe=i(k);de=p(pe,"Recently read an extremely informative e-book on database indexing over at "),y=o(pe,"A",{href:!0,rel:!0});var Je=i(y);fe=p(Je,"use-the-index-luke"),Je.forEach(t),he=p(pe,`.
This post is to synthesise and summarise the main learnings that I took away from the ~200 page e-book.`),pe.forEach(t),M=d(e),v=o(e,"H1",{});var Me=i(v);ce=p(Me,"The Three Powers of Indexing"),Me.forEach(t),F=d(e),f=o(e,"OL",{});var S=i(f);A=o(S,"LI",{});var Fe=i(A);ke=p(Fe,"B-Tree Traversal"),Fe.forEach(t),ye=d(S),N=o(S,"LI",{});var Ke=i(N);be=p(Ke,"Data Clustering"),Ke.forEach(t),me=d(S),C=o(S,"LI",{});var Qe=i(C);Ee=p(Qe,"Pipelined Sorting"),Qe.forEach(t),S.forEach(t),K=d(e),x=o(e,"H2",{});var Ve=i(x);ve=p(Ve,"Data Structures Underlying the Index"),Ve.forEach(t),Q=d(e),b=o(e,"P",{});var qe=i(b);G=o(qe,"STRONG",{});var Xe=i(G);xe=p(Xe,"Redundant/Duplicated Data"),Xe.forEach(t),_e=p(qe,`
An index is (usually) a separate data structure maintained by the database.
In other words, it is redundant data that is stored/managed on top of the actual data that is stored/managed in your table.
An index is powered by two key data structures: Doubly Linked List and B-Tree.
One node corresponds to one database block.`),qe.forEach(t),V=d(e),h=o(e,"P",{});var j=i(h);z=o(j,"STRONG",{});var Ze=i(z);Te=p(Ze,"Database block / Database page"),Ze.forEach(t),we=p(j,`
A database block or page is the smallest (size) unit of operation, usually about 4 kilobytes in size.
The data in one block is physically arranged in a `),U=o(j,"EM",{});var $e=i(U);De=p($e,"contiguous"),$e.forEach(t),Re=p(j,` block of memory.
One block can usually store multiple rows of the table data, or multiple index entries.
This means that in order to read a single row within a block that contains multiple rows, the database will have to read the entire block.`),j.forEach(t),X=d(e),m=o(e,"P",{});var We=i(m);q=o(We,"STRONG",{});var ge=i(q);Pe=p(ge,"Doubly Linked List"),ge.forEach(t),Ie=p(We,`
The doubly linked lists\u2019 nodes are actually the leaf nodes for the B-tree.
Each node has multiple index entries, sorted by the index key.
Each entry in the node will store the index key(s) and also a pointer (ROWID) to the corresponding (physical) location of the data row.
Each node is also connected to the next higher entry node and next lower entry node, giving it the ability to move up and down the index keys (double linked list).
This effectively makes the index entries and the index nodes all sorted.`),We.forEach(t),Z=d(e),_=o(e,"P",{});var et=i(_);W=o(et,"STRONG",{});var tt=i(W);Oe=p(tt,"B-tree"),tt.forEach(t),et.forEach(t),$=d(e),T=o(e,"P",{});var at=i(T);Y=o(at,"STRONG",{});var st=i(Y);He=p(st,"Pipelining"),st.forEach(t),at.forEach(t),g=d(e),w=o(e,"H2",{});var nt=i(w);Le=p(nt,"WHERE clause"),nt.forEach(t),ee=d(e),D=o(e,"H2",{});var lt=i(D);Be=p(lt,"JOIN operations"),lt.forEach(t),te=d(e),R=o(e,"H2",{});var ot=i(R);Se=p(ot,"ORDER BY and GROUP BY"),ot.forEach(t),ae=d(e),P=o(e,"H2",{});var it=i(P);Ae=p(it,"Data Clustering"),it.forEach(t),se=d(e),I=o(e,"H2",{});var rt=i(I);Ne=p(rt,"Partial Results"),rt.forEach(t),ne=d(e),O=o(e,"H2",{});var pt=i(O);Ce=p(pt,"INSERT, DELETE, UPDATE"),pt.forEach(t),le=d(e),H=o(e,"P",{});var ut=i(H);Ge=p(ut,"Code:"),ut.forEach(t),oe=d(e),E=o(e,"PRE",{class:!0});var yt=i(E);yt.forEach(t),ie=d(e),L=o(e,"H2",{});var dt=i(L);ze=p(dt,"Heading 2"),dt.forEach(t),re=d(e),B=o(e,"P",{});var ft=i(B);Ue=p(ft,"The quick brown fox jumps over the lazy dog."),ft.forEach(t),this.h()},h(){Ye(y,"href","https://use-the-index-luke.com/"),Ye(y,"rel","nofollow"),Ye(E,"class","language-css")},m(e,a){n(e,c,a),s(c,ue),n(e,J,a),n(e,k,a),s(k,de),s(k,y),s(y,fe),s(k,he),n(e,M,a),n(e,v,a),s(v,ce),n(e,F,a),n(e,f,a),s(f,A),s(A,ke),s(f,ye),s(f,N),s(N,be),s(f,me),s(f,C),s(C,Ee),n(e,K,a),n(e,x,a),s(x,ve),n(e,Q,a),n(e,b,a),s(b,G),s(G,xe),s(b,_e),n(e,V,a),n(e,h,a),s(h,z),s(z,Te),s(h,we),s(h,U),s(U,De),s(h,Re),n(e,X,a),n(e,m,a),s(m,q),s(q,Pe),s(m,Ie),n(e,Z,a),n(e,_,a),s(_,W),s(W,Oe),n(e,$,a),n(e,T,a),s(T,Y),s(Y,He),n(e,g,a),n(e,w,a),s(w,Le),n(e,ee,a),n(e,D,a),s(D,Be),n(e,te,a),n(e,R,a),s(R,Se),n(e,ae,a),n(e,P,a),s(P,Ae),n(e,se,a),n(e,I,a),s(I,Ne),n(e,ne,a),n(e,O,a),s(O,Ce),n(e,le,a),n(e,H,a),s(H,Ge),n(e,oe,a),n(e,E,a),E.innerHTML=kt,n(e,ie,a),n(e,L,a),s(L,ze),n(e,re,a),n(e,B,a),s(B,Ue)},p:je,i:je,o:je,d(e){e&&t(c),e&&t(J),e&&t(k),e&&t(M),e&&t(v),e&&t(F),e&&t(f),e&&t(K),e&&t(x),e&&t(Q),e&&t(b),e&&t(V),e&&t(h),e&&t(X),e&&t(m),e&&t(Z),e&&t(_),e&&t($),e&&t(T),e&&t(g),e&&t(w),e&&t(ee),e&&t(D),e&&t(te),e&&t(R),e&&t(ae),e&&t(P),e&&t(se),e&&t(I),e&&t(ne),e&&t(O),e&&t(le),e&&t(H),e&&t(oe),e&&t(E),e&&t(ie),e&&t(L),e&&t(re),e&&t(B)}}}const xt={title:"Database Indexes",date:"2023-06-07"},{title:ht,date:Tt}=xt;class wt extends bt{constructor(c){super(),mt(this,c,null,vt,Et,{})}}export{wt as default,xt as metadata};
