import{S as fl,i as dl,s as kl,k as o,q as a,a as i,l,m as c,r as n,h as s,c as u,n as Un,b as r,B as e,A as Nn}from"./index-39c5cc75.js";function hl(ol){let T,ss,bt,z,as,ke,ns,os,wt,V,ls,Ct,W,cs,Ot,k,X,he,ps,rs,is,Y,me,us,fs,ds,Z,ve,ks,hs,ms,S,Ee,vs,Es,_e,_s,ys,bs,$,ye,ws,Cs,Pt,ee,Os,Dt,R,Ps,be,Ds,Ks,Kt,h,we,gs,Ls,Ce,Is,Ts,Oe,zs,Ss,Pe,Rs,qs,De,Hs,gt,te,xs,Lt,A,Ke,Ms,As,It,U,ll='<code class="language-py">producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>config<span class="token punctuation">)</span></code>',Tt,se,Us,zt,f,q,ge,Ns,js,Le,Js,Bs,Gs,E,Ie,Fs,Qs,Te,Vs,Ws,ze,Xs,Ys,Se,Zs,$s,ea,w,Re,ta,sa,qe,aa,na,He,oa,la,ca,N,xe,pa,ra,Me,ia,ua,j,Ae,fa,da,Ue,ka,ha,H,ma,Ne,va,Ea,je,_a,St,ae,ya,Rt,g,ba,Je,wa,Ca,Be,Oa,qt,L,Ge,Pa,Da,Fe,Ka,ga,Ht,ne,La,xt,m,Qe,Ia,Ta,Ve,za,Sa,We,Ra,qa,Xe,Ha,xa,Ye,Ma,Mt,oe,Aa,At,J,cl=`<code class="language-py"><span class="token keyword">from</span> confluent_kafka <span class="token keyword">import</span> Producer

config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>boostrap<span class="token punctuation">.</span>servers<span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">&#125;</span>
producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>config<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> KafkaError<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> Message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Event produce to topic </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span>topic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> failed for event: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> sent to topic </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span>topic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> in partition </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

producer<span class="token punctuation">.</span>produce<span class="token punctuation">(</span>
    topic <span class="token operator">=</span> <span class="token string">'hello_topic'</span><span class="token punctuation">,</span>
    key <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>
    value <span class="token operator">=</span> <span class="token string">"hello abc"</span><span class="token punctuation">,</span>
    on_delivery <span class="token operator">=</span> callback
<span class="token punctuation">)</span>
producer<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Ut,le,Ua,Nt,x,Na,Ze,ja,Ja,jt,v,$e,Ba,Ga,et,Fa,Qa,tt,Va,Wa,st,Xa,Ya,at,Za,Jt,ce,$a,Bt,pe,en,Gt,_,re,nt,tn,sn,an,C,ot,nn,on,lt,ln,cn,ct,pn,rn,un,ie,pt,fn,dn,kn,ue,rt,hn,mn,Ft,fe,vn,Qt,B,it,En,_n,Vt,d,ut,yn,bn,ft,wn,Cn,dt,On,Pn,kt,Dn,Kn,ht,gn,Ln,Wt,de,In,Xt,G,pl=`<code class="language-py">config
consumer <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
consumer<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'my_topic'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        event <span class="token operator">=</span> consumer<span class="token punctuation">.</span>poll<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> event <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">if</span> event<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Received message: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> from partition </span><span class="token interpolation"><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> in topic </span><span class="token interpolation"><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>topci<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
            consumer<span class="token punctuation">.</span>commit<span class="token punctuation">(</span>event<span class="token punctuation">)</span>
<span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Shutting down"</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    consumer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`;return{c(){T=o("h1"),ss=a(nl),bt=i(),z=o("p"),as=a(`Python has multiple client implementations to interact with a Kafka cluster.
This post will walk through the `),ke=o("code"),ns=a("confluent-kafka-python"),os=a(" client, which is the official Python client implementation by Confluent Inc."),wt=i(),V=o("h2"),ls=a("Overview"),Ct=i(),W=o("p"),cs=a("This client module has a few main classes that make up the bulk of its API:"),Ot=i(),k=o("ul"),X=o("li"),he=o("code"),ps=a("Producer"),rs=a(": To produce events to the Kafka cluster"),is=i(),Y=o("li"),me=o("code"),us=a("Consumer"),fs=a(": To read events from the Kafka cluster"),ds=i(),Z=o("li"),ve=o("code"),ks=a("SchemaRegistryClient"),hs=a(": To get metadata/schemas about the Kafka cluster/topics when you have a Kafka Schema Registry server"),ms=i(),S=o("li"),Ee=o("code"),vs=a("Serializer"),Es=a(" / "),_e=o("code"),_s=a("Deserializer"),ys=a(": To serialize and deserialize messages sent/received from Kafka into/from formats like JSON, Protobuf, Avro, etc."),bs=i(),$=o("li"),ye=o("code"),ws=a("AdminClient"),Cs=a(": To manage the Kafka cluster (e.g. creating topics, partitions, etc.)"),Pt=i(),ee=o("h2"),Os=a("Producer"),Dt=i(),R=o("p"),Ps=a("The "),be=o("code"),Ds=a("Producer"),Ks=a(" class is used to send events to Kafka. It is responsible for:"),Kt=i(),h=o("ul"),we=o("li"),gs=a("Partition assignment of the events"),Ls=i(),Ce=o("li"),Is=a("Batching events for improved throughput (but added latency)"),Ts=i(),Oe=o("li"),zs=a("Compression of events and its data"),Ss=i(),Pe=o("li"),Rs=a("Retries (e.g. due to network errors)"),qs=i(),De=o("li"),Hs=a("Response callbacks when events are successfully delivered"),gt=i(),te=o("h3"),xs=a("using Producer"),Lt=i(),A=o("p"),Ke=o("code"),Ms=a("Producer"),As=a(" can be initialised by passing in a dictionary of configuration settings to the constructor."),It=i(),U=o("pre"),Tt=i(),se=o("p"),Us=a("The configuration can include the following:"),zt=i(),f=o("ul"),q=o("li"),ge=o("code"),Ns=a("bootstrap.servers"),js=a(" ("),Le=o("strong"),Js=a("required"),Bs=a("): the URL to the Kafka cluster/brokers"),Gs=i(),E=o("li"),Ie=o("code"),Fs=a("acks"),Qs=a(": level of acknowledgement required before returning from produce request ("),Te=o("code"),Vs=a("0"),Ws=a(", "),ze=o("code"),Xs=a("1"),Ys=a(", "),Se=o("code"),Zs=a("all"),$s=a(" for no ack, only lead broker ack, and all broker acks, respectively)"),ea=i(),w=o("li"),Re=o("code"),ta=a("compression.type"),sa=a(": enables compression of messages (e.g. "),qe=o("code"),aa=a("gzip"),na=a(", "),He=o("code"),oa=a("zstd"),la=a(")"),ca=i(),N=o("li"),xe=o("code"),pa=a("batch.size"),ra=a(": number of bytes to batch up before sending produce request. Should be adjust with "),Me=o("code"),ia=a("linger.ms"),ua=i(),j=o("li"),Ae=o("code"),fa=a("linger.ms"),da=a(": number of milliseconds to wait for batch before sending produce request (i.e. latency). Should be adjusted with "),Ue=o("code"),ka=a("batch.size"),ha=i(),H=o("li"),ma=a("any other connection security settings like "),Ne=o("code"),va=a("security.protocol"),Ea=a(" and "),je=o("code"),_a=a("ssl.keystore"),St=i(),ae=o("h3"),ya=a("methods"),Rt=i(),g=o("p"),ba=a("The 2 most important methods to take not of is "),Je=o("code"),wa=a(".produce()"),Ca=a(" and "),Be=o("code"),Oa=a(".flush()"),qt=i(),L=o("p"),Ge=o("code"),Pa=a(".produce()"),Da=a(" is used to send events to Kafka asynchronously, and "),Fe=o("code"),Ka=a(".flush()"),ga=a(" is used to make sure all produce requests and callbacks are complete."),Ht=i(),ne=o("h4"),La=a("methods for transactions"),xt=i(),m=o("p"),Qe=o("code"),Ia=a("Producer.init_transactions()"),Ta=i(),Ve=o("code"),za=a("Producer.begin_transaction()"),Sa=i(),We=o("code"),Ra=a("Producer.commit_transaction()"),qa=i(),Xe=o("code"),Ha=a("Producer.abort_transaction()"),xa=i(),Ye=o("code"),Ma=a("Producer.send_offsets_to_transaction()"),Mt=i(),oe=o("h3"),Aa=a("example code"),At=i(),J=o("pre"),Ut=i(),le=o("h2"),Ua=a("Consumer"),Nt=i(),x=o("p"),Na=a("The "),Ze=o("code"),ja=a("Consumer"),Ja=a(" class\u2019 main function used to read events from the Kafka cluster. It is also responsbile several areas like:"),jt=i(),v=o("ul"),$e=o("li"),Ba=a("Subscribing to Kafka topics"),Ga=i(),et=o("li"),Fa=a("Reading from those topics"),Qa=i(),tt=o("li"),Va=a("Keeping track of successfully read events (by updating commited offset)"),Wa=i(),st=o("li"),Xa=a("Manage offsets of the application"),Ya=i(),at=o("li"),Za=a("Joining Consumer Groups (to horizontally scale the consumer app, up to number of partitions of topic)"),Jt=i(),ce=o("h3"),$a=a("configs"),Bt=i(),pe=o("p"),en=a("cluster location, security settings, consumer group settings"),Gt=i(),_=o("ul"),re=o("li"),nt=o("code"),tn=a("group.id"),sn=a(": the group id that identifies which consumer belongs to which consumer group (i.e. same group id = same consumer group)"),an=i(),C=o("li"),ot=o("code"),nn=a("auto.offset.reset"),on=a(": whether to start reading at the beginning of topic ("),lt=o("code"),ln=a("earliest"),cn=a("), or only read new events as they arrive ("),ct=o("code"),pn=a("latest"),rn=a("); this only comes into play when there is no offsets in Kafka (e.g. at the start of consumer app or when offset expire)"),un=i(),ie=o("li"),pt=o("code"),fn=a("enable.auto.commit"),dn=a(": whether to manually commit offsets using our code, or let the client automatically commit"),kn=i(),ue=o("li"),rt=o("code"),hn=a("isolation.level"),mn=a(": transaction processing, whether to read committed or uncomitted events"),Ft=i(),fe=o("h3"),vn=a("methods"),Qt=i(),B=o("p"),it=o("code"),En=a(".subscribe()"),_n=a(": subscribes to Kafka topics. can pass in callbacks to handle on reshuffle etc."),Vt=i(),d=o("p"),ut=o("code"),yn=a(".poll()"),bn=a(": returns either "),ft=o("code"),wn=a("None"),Cn=a(" (when client cannot reach Kafka server or there is) or a "),dt=o("code"),On=a("Message"),Pn=a(", which the client will need to check for "),kt=o("code"),Dn=a("Message.error()"),Kn=a(" for any "),ht=o("code"),gn=a("KafkaError"),Ln=a("."),Wt=i(),de=o("h3"),In=a("example code"),Xt=i(),G=o("pre"),this.h()},l(t){T=l(t,"H1",{});var p=c(T);ss=n(p,nl),p.forEach(s),bt=u(t),z=l(t,"P",{});var Yt=c(z);as=n(Yt,`Python has multiple client implementations to interact with a Kafka cluster.
This post will walk through the `),ke=l(Yt,"CODE",{});var jn=c(ke);ns=n(jn,"confluent-kafka-python"),jn.forEach(s),os=n(Yt," client, which is the official Python client implementation by Confluent Inc."),Yt.forEach(s),wt=u(t),V=l(t,"H2",{});var Jn=c(V);ls=n(Jn,"Overview"),Jn.forEach(s),Ct=u(t),W=l(t,"P",{});var Bn=c(W);cs=n(Bn,"This client module has a few main classes that make up the bulk of its API:"),Bn.forEach(s),Ot=u(t),k=l(t,"UL",{});var O=c(k);X=l(O,"LI",{});var Tn=c(X);he=l(Tn,"CODE",{});var Gn=c(he);ps=n(Gn,"Producer"),Gn.forEach(s),rs=n(Tn,": To produce events to the Kafka cluster"),Tn.forEach(s),is=u(O),Y=l(O,"LI",{});var zn=c(Y);me=l(zn,"CODE",{});var Fn=c(me);us=n(Fn,"Consumer"),Fn.forEach(s),fs=n(zn,": To read events from the Kafka cluster"),zn.forEach(s),ds=u(O),Z=l(O,"LI",{});var Sn=c(Z);ve=l(Sn,"CODE",{});var Qn=c(ve);ks=n(Qn,"SchemaRegistryClient"),Qn.forEach(s),hs=n(Sn,": To get metadata/schemas about the Kafka cluster/topics when you have a Kafka Schema Registry server"),Sn.forEach(s),ms=u(O),S=l(O,"LI",{});var mt=c(S);Ee=l(mt,"CODE",{});var Vn=c(Ee);vs=n(Vn,"Serializer"),Vn.forEach(s),Es=n(mt," / "),_e=l(mt,"CODE",{});var Wn=c(_e);_s=n(Wn,"Deserializer"),Wn.forEach(s),ys=n(mt,": To serialize and deserialize messages sent/received from Kafka into/from formats like JSON, Protobuf, Avro, etc."),mt.forEach(s),bs=u(O),$=l(O,"LI",{});var Rn=c($);ye=l(Rn,"CODE",{});var Xn=c(ye);ws=n(Xn,"AdminClient"),Xn.forEach(s),Cs=n(Rn,": To manage the Kafka cluster (e.g. creating topics, partitions, etc.)"),Rn.forEach(s),O.forEach(s),Pt=u(t),ee=l(t,"H2",{});var Yn=c(ee);Os=n(Yn,"Producer"),Yn.forEach(s),Dt=u(t),R=l(t,"P",{});var Zt=c(R);Ps=n(Zt,"The "),be=l(Zt,"CODE",{});var Zn=c(be);Ds=n(Zn,"Producer"),Zn.forEach(s),Ks=n(Zt," class is used to send events to Kafka. It is responsible for:"),Zt.forEach(s),Kt=u(t),h=l(t,"UL",{});var P=c(h);we=l(P,"LI",{});var $n=c(we);gs=n($n,"Partition assignment of the events"),$n.forEach(s),Ls=u(P),Ce=l(P,"LI",{});var eo=c(Ce);Is=n(eo,"Batching events for improved throughput (but added latency)"),eo.forEach(s),Ts=u(P),Oe=l(P,"LI",{});var to=c(Oe);zs=n(to,"Compression of events and its data"),to.forEach(s),Ss=u(P),Pe=l(P,"LI",{});var so=c(Pe);Rs=n(so,"Retries (e.g. due to network errors)"),so.forEach(s),qs=u(P),De=l(P,"LI",{});var ao=c(De);Hs=n(ao,"Response callbacks when events are successfully delivered"),ao.forEach(s),P.forEach(s),gt=u(t),te=l(t,"H3",{});var no=c(te);xs=n(no,"using Producer"),no.forEach(s),Lt=u(t),A=l(t,"P",{});var qn=c(A);Ke=l(qn,"CODE",{});var oo=c(Ke);Ms=n(oo,"Producer"),oo.forEach(s),As=n(qn," can be initialised by passing in a dictionary of configuration settings to the constructor."),qn.forEach(s),It=u(t),U=l(t,"PRE",{class:!0});var rl=c(U);rl.forEach(s),Tt=u(t),se=l(t,"P",{});var lo=c(se);Us=n(lo,"The configuration can include the following:"),lo.forEach(s),zt=u(t),f=l(t,"UL",{});var y=c(f);q=l(y,"LI",{});var vt=c(q);ge=l(vt,"CODE",{});var co=c(ge);Ns=n(co,"bootstrap.servers"),co.forEach(s),js=n(vt," ("),Le=l(vt,"STRONG",{});var po=c(Le);Js=n(po,"required"),po.forEach(s),Bs=n(vt,"): the URL to the Kafka cluster/brokers"),vt.forEach(s),Gs=u(y),E=l(y,"LI",{});var I=c(E);Ie=l(I,"CODE",{});var ro=c(Ie);Fs=n(ro,"acks"),ro.forEach(s),Qs=n(I,": level of acknowledgement required before returning from produce request ("),Te=l(I,"CODE",{});var io=c(Te);Vs=n(io,"0"),io.forEach(s),Ws=n(I,", "),ze=l(I,"CODE",{});var uo=c(ze);Xs=n(uo,"1"),uo.forEach(s),Ys=n(I,", "),Se=l(I,"CODE",{});var fo=c(Se);Zs=n(fo,"all"),fo.forEach(s),$s=n(I," for no ack, only lead broker ack, and all broker acks, respectively)"),I.forEach(s),ea=u(y),w=l(y,"LI",{});var F=c(w);Re=l(F,"CODE",{});var ko=c(Re);ta=n(ko,"compression.type"),ko.forEach(s),sa=n(F,": enables compression of messages (e.g. "),qe=l(F,"CODE",{});var ho=c(qe);aa=n(ho,"gzip"),ho.forEach(s),na=n(F,", "),He=l(F,"CODE",{});var mo=c(He);oa=n(mo,"zstd"),mo.forEach(s),la=n(F,")"),F.forEach(s),ca=u(y),N=l(y,"LI",{});var $t=c(N);xe=l($t,"CODE",{});var vo=c(xe);pa=n(vo,"batch.size"),vo.forEach(s),ra=n($t,": number of bytes to batch up before sending produce request. Should be adjust with "),Me=l($t,"CODE",{});var Eo=c(Me);ia=n(Eo,"linger.ms"),Eo.forEach(s),$t.forEach(s),ua=u(y),j=l(y,"LI",{});var es=c(j);Ae=l(es,"CODE",{});var _o=c(Ae);fa=n(_o,"linger.ms"),_o.forEach(s),da=n(es,": number of milliseconds to wait for batch before sending produce request (i.e. latency). Should be adjusted with "),Ue=l(es,"CODE",{});var yo=c(Ue);ka=n(yo,"batch.size"),yo.forEach(s),es.forEach(s),ha=u(y),H=l(y,"LI",{});var Et=c(H);ma=n(Et,"any other connection security settings like "),Ne=l(Et,"CODE",{});var bo=c(Ne);va=n(bo,"security.protocol"),bo.forEach(s),Ea=n(Et," and "),je=l(Et,"CODE",{});var wo=c(je);_a=n(wo,"ssl.keystore"),wo.forEach(s),Et.forEach(s),y.forEach(s),St=u(t),ae=l(t,"H3",{});var Co=c(ae);ya=n(Co,"methods"),Co.forEach(s),Rt=u(t),g=l(t,"P",{});var _t=c(g);ba=n(_t,"The 2 most important methods to take not of is "),Je=l(_t,"CODE",{});var Oo=c(Je);wa=n(Oo,".produce()"),Oo.forEach(s),Ca=n(_t," and "),Be=l(_t,"CODE",{});var Po=c(Be);Oa=n(Po,".flush()"),Po.forEach(s),_t.forEach(s),qt=u(t),L=l(t,"P",{});var yt=c(L);Ge=l(yt,"CODE",{});var Do=c(Ge);Pa=n(Do,".produce()"),Do.forEach(s),Da=n(yt," is used to send events to Kafka asynchronously, and "),Fe=l(yt,"CODE",{});var Ko=c(Fe);Ka=n(Ko,".flush()"),Ko.forEach(s),ga=n(yt," is used to make sure all produce requests and callbacks are complete."),yt.forEach(s),Ht=u(t),ne=l(t,"H4",{});var go=c(ne);La=n(go,"methods for transactions"),go.forEach(s),xt=u(t),m=l(t,"P",{});var D=c(m);Qe=l(D,"CODE",{});var Lo=c(Qe);Ia=n(Lo,"Producer.init_transactions()"),Lo.forEach(s),Ta=u(D),Ve=l(D,"CODE",{});var Io=c(Ve);za=n(Io,"Producer.begin_transaction()"),Io.forEach(s),Sa=u(D),We=l(D,"CODE",{});var To=c(We);Ra=n(To,"Producer.commit_transaction()"),To.forEach(s),qa=u(D),Xe=l(D,"CODE",{});var zo=c(Xe);Ha=n(zo,"Producer.abort_transaction()"),zo.forEach(s),xa=u(D),Ye=l(D,"CODE",{});var So=c(Ye);Ma=n(So,"Producer.send_offsets_to_transaction()"),So.forEach(s),D.forEach(s),Mt=u(t),oe=l(t,"H3",{});var Ro=c(oe);Aa=n(Ro,"example code"),Ro.forEach(s),At=u(t),J=l(t,"PRE",{class:!0});var il=c(J);il.forEach(s),Ut=u(t),le=l(t,"H2",{});var qo=c(le);Ua=n(qo,"Consumer"),qo.forEach(s),Nt=u(t),x=l(t,"P",{});var ts=c(x);Na=n(ts,"The "),Ze=l(ts,"CODE",{});var Ho=c(Ze);ja=n(Ho,"Consumer"),Ho.forEach(s),Ja=n(ts," class\u2019 main function used to read events from the Kafka cluster. It is also responsbile several areas like:"),ts.forEach(s),jt=u(t),v=l(t,"UL",{});var K=c(v);$e=l(K,"LI",{});var xo=c($e);Ba=n(xo,"Subscribing to Kafka topics"),xo.forEach(s),Ga=u(K),et=l(K,"LI",{});var Mo=c(et);Fa=n(Mo,"Reading from those topics"),Mo.forEach(s),Qa=u(K),tt=l(K,"LI",{});var Ao=c(tt);Va=n(Ao,"Keeping track of successfully read events (by updating commited offset)"),Ao.forEach(s),Wa=u(K),st=l(K,"LI",{});var Uo=c(st);Xa=n(Uo,"Manage offsets of the application"),Uo.forEach(s),Ya=u(K),at=l(K,"LI",{});var No=c(at);Za=n(No,"Joining Consumer Groups (to horizontally scale the consumer app, up to number of partitions of topic)"),No.forEach(s),K.forEach(s),Jt=u(t),ce=l(t,"H3",{});var jo=c(ce);$a=n(jo,"configs"),jo.forEach(s),Bt=u(t),pe=l(t,"P",{});var Jo=c(pe);en=n(Jo,"cluster location, security settings, consumer group settings"),Jo.forEach(s),Gt=u(t),_=l(t,"UL",{});var M=c(_);re=l(M,"LI",{});var Hn=c(re);nt=l(Hn,"CODE",{});var Bo=c(nt);tn=n(Bo,"group.id"),Bo.forEach(s),sn=n(Hn,": the group id that identifies which consumer belongs to which consumer group (i.e. same group id = same consumer group)"),Hn.forEach(s),an=u(M),C=l(M,"LI",{});var Q=c(C);ot=l(Q,"CODE",{});var Go=c(ot);nn=n(Go,"auto.offset.reset"),Go.forEach(s),on=n(Q,": whether to start reading at the beginning of topic ("),lt=l(Q,"CODE",{});var Fo=c(lt);ln=n(Fo,"earliest"),Fo.forEach(s),cn=n(Q,"), or only read new events as they arrive ("),ct=l(Q,"CODE",{});var Qo=c(ct);pn=n(Qo,"latest"),Qo.forEach(s),rn=n(Q,"); this only comes into play when there is no offsets in Kafka (e.g. at the start of consumer app or when offset expire)"),Q.forEach(s),un=u(M),ie=l(M,"LI",{});var xn=c(ie);pt=l(xn,"CODE",{});var Vo=c(pt);fn=n(Vo,"enable.auto.commit"),Vo.forEach(s),dn=n(xn,": whether to manually commit offsets using our code, or let the client automatically commit"),xn.forEach(s),kn=u(M),ue=l(M,"LI",{});var Mn=c(ue);rt=l(Mn,"CODE",{});var Wo=c(rt);hn=n(Wo,"isolation.level"),Wo.forEach(s),mn=n(Mn,": transaction processing, whether to read committed or uncomitted events"),Mn.forEach(s),M.forEach(s),Ft=u(t),fe=l(t,"H3",{});var Xo=c(fe);vn=n(Xo,"methods"),Xo.forEach(s),Qt=u(t),B=l(t,"P",{});var An=c(B);it=l(An,"CODE",{});var Yo=c(it);En=n(Yo,".subscribe()"),Yo.forEach(s),_n=n(An,": subscribes to Kafka topics. can pass in callbacks to handle on reshuffle etc."),An.forEach(s),Vt=u(t),d=l(t,"P",{});var b=c(d);ut=l(b,"CODE",{});var Zo=c(ut);yn=n(Zo,".poll()"),Zo.forEach(s),bn=n(b,": returns either "),ft=l(b,"CODE",{});var $o=c(ft);wn=n($o,"None"),$o.forEach(s),Cn=n(b," (when client cannot reach Kafka server or there is) or a "),dt=l(b,"CODE",{});var el=c(dt);On=n(el,"Message"),el.forEach(s),Pn=n(b,", which the client will need to check for "),kt=l(b,"CODE",{});var tl=c(kt);Dn=n(tl,"Message.error()"),tl.forEach(s),Kn=n(b," for any "),ht=l(b,"CODE",{});var sl=c(ht);gn=n(sl,"KafkaError"),sl.forEach(s),Ln=n(b,"."),b.forEach(s),Wt=u(t),de=l(t,"H3",{});var al=c(de);In=n(al,"example code"),al.forEach(s),Xt=u(t),G=l(t,"PRE",{class:!0});var ul=c(G);ul.forEach(s),this.h()},h(){Un(U,"class","language-py"),Un(J,"class","language-py"),Un(G,"class","language-py")},m(t,p){r(t,T,p),e(T,ss),r(t,bt,p),r(t,z,p),e(z,as),e(z,ke),e(ke,ns),e(z,os),r(t,wt,p),r(t,V,p),e(V,ls),r(t,Ct,p),r(t,W,p),e(W,cs),r(t,Ot,p),r(t,k,p),e(k,X),e(X,he),e(he,ps),e(X,rs),e(k,is),e(k,Y),e(Y,me),e(me,us),e(Y,fs),e(k,ds),e(k,Z),e(Z,ve),e(ve,ks),e(Z,hs),e(k,ms),e(k,S),e(S,Ee),e(Ee,vs),e(S,Es),e(S,_e),e(_e,_s),e(S,ys),e(k,bs),e(k,$),e($,ye),e(ye,ws),e($,Cs),r(t,Pt,p),r(t,ee,p),e(ee,Os),r(t,Dt,p),r(t,R,p),e(R,Ps),e(R,be),e(be,Ds),e(R,Ks),r(t,Kt,p),r(t,h,p),e(h,we),e(we,gs),e(h,Ls),e(h,Ce),e(Ce,Is),e(h,Ts),e(h,Oe),e(Oe,zs),e(h,Ss),e(h,Pe),e(Pe,Rs),e(h,qs),e(h,De),e(De,Hs),r(t,gt,p),r(t,te,p),e(te,xs),r(t,Lt,p),r(t,A,p),e(A,Ke),e(Ke,Ms),e(A,As),r(t,It,p),r(t,U,p),U.innerHTML=ll,r(t,Tt,p),r(t,se,p),e(se,Us),r(t,zt,p),r(t,f,p),e(f,q),e(q,ge),e(ge,Ns),e(q,js),e(q,Le),e(Le,Js),e(q,Bs),e(f,Gs),e(f,E),e(E,Ie),e(Ie,Fs),e(E,Qs),e(E,Te),e(Te,Vs),e(E,Ws),e(E,ze),e(ze,Xs),e(E,Ys),e(E,Se),e(Se,Zs),e(E,$s),e(f,ea),e(f,w),e(w,Re),e(Re,ta),e(w,sa),e(w,qe),e(qe,aa),e(w,na),e(w,He),e(He,oa),e(w,la),e(f,ca),e(f,N),e(N,xe),e(xe,pa),e(N,ra),e(N,Me),e(Me,ia),e(f,ua),e(f,j),e(j,Ae),e(Ae,fa),e(j,da),e(j,Ue),e(Ue,ka),e(f,ha),e(f,H),e(H,ma),e(H,Ne),e(Ne,va),e(H,Ea),e(H,je),e(je,_a),r(t,St,p),r(t,ae,p),e(ae,ya),r(t,Rt,p),r(t,g,p),e(g,ba),e(g,Je),e(Je,wa),e(g,Ca),e(g,Be),e(Be,Oa),r(t,qt,p),r(t,L,p),e(L,Ge),e(Ge,Pa),e(L,Da),e(L,Fe),e(Fe,Ka),e(L,ga),r(t,Ht,p),r(t,ne,p),e(ne,La),r(t,xt,p),r(t,m,p),e(m,Qe),e(Qe,Ia),e(m,Ta),e(m,Ve),e(Ve,za),e(m,Sa),e(m,We),e(We,Ra),e(m,qa),e(m,Xe),e(Xe,Ha),e(m,xa),e(m,Ye),e(Ye,Ma),r(t,Mt,p),r(t,oe,p),e(oe,Aa),r(t,At,p),r(t,J,p),J.innerHTML=cl,r(t,Ut,p),r(t,le,p),e(le,Ua),r(t,Nt,p),r(t,x,p),e(x,Na),e(x,Ze),e(Ze,ja),e(x,Ja),r(t,jt,p),r(t,v,p),e(v,$e),e($e,Ba),e(v,Ga),e(v,et),e(et,Fa),e(v,Qa),e(v,tt),e(tt,Va),e(v,Wa),e(v,st),e(st,Xa),e(v,Ya),e(v,at),e(at,Za),r(t,Jt,p),r(t,ce,p),e(ce,$a),r(t,Bt,p),r(t,pe,p),e(pe,en),r(t,Gt,p),r(t,_,p),e(_,re),e(re,nt),e(nt,tn),e(re,sn),e(_,an),e(_,C),e(C,ot),e(ot,nn),e(C,on),e(C,lt),e(lt,ln),e(C,cn),e(C,ct),e(ct,pn),e(C,rn),e(_,un),e(_,ie),e(ie,pt),e(pt,fn),e(ie,dn),e(_,kn),e(_,ue),e(ue,rt),e(rt,hn),e(ue,mn),r(t,Ft,p),r(t,fe,p),e(fe,vn),r(t,Qt,p),r(t,B,p),e(B,it),e(it,En),e(B,_n),r(t,Vt,p),r(t,d,p),e(d,ut),e(ut,yn),e(d,bn),e(d,ft),e(ft,wn),e(d,Cn),e(d,dt),e(dt,On),e(d,Pn),e(d,kt),e(kt,Dn),e(d,Kn),e(d,ht),e(ht,gn),e(d,Ln),r(t,Wt,p),r(t,de,p),e(de,In),r(t,Xt,p),r(t,G,p),G.innerHTML=pl},p:Nn,i:Nn,o:Nn,d(t){t&&s(T),t&&s(bt),t&&s(z),t&&s(wt),t&&s(V),t&&s(Ct),t&&s(W),t&&s(Ot),t&&s(k),t&&s(Pt),t&&s(ee),t&&s(Dt),t&&s(R),t&&s(Kt),t&&s(h),t&&s(gt),t&&s(te),t&&s(Lt),t&&s(A),t&&s(It),t&&s(U),t&&s(Tt),t&&s(se),t&&s(zt),t&&s(f),t&&s(St),t&&s(ae),t&&s(Rt),t&&s(g),t&&s(qt),t&&s(L),t&&s(Ht),t&&s(ne),t&&s(xt),t&&s(m),t&&s(Mt),t&&s(oe),t&&s(At),t&&s(J),t&&s(Ut),t&&s(le),t&&s(Nt),t&&s(x),t&&s(jt),t&&s(v),t&&s(Jt),t&&s(ce),t&&s(Bt),t&&s(pe),t&&s(Gt),t&&s(_),t&&s(Ft),t&&s(fe),t&&s(Qt),t&&s(B),t&&s(Vt),t&&s(d),t&&s(Wt),t&&s(de),t&&s(Xt),t&&s(G)}}}const ml={title:"Kafka and Python",date:"2023-03-15"},{title:nl,date:El}=ml;class _l extends fl{constructor(T){super(),dl(this,T,null,hl,kl,{})}}export{_l as default,ml as metadata};
